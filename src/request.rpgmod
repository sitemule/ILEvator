**FREE

ctl-opt nomain thread(*concurrent);


/include 'debug.rpginc'
/include 'message.rpginc'
/include 'mime.rpginc'
/include 'request.rpginc'
/include 'simpleList.rpginc'
/include 'stream.rpginc'
/include 'teraspace.rpginc'
/include 'url.rpginc'
/include 'varchar.rpginc'
/include 'xlate.rpginc'
/include 'clib.rpginc'



dcl-c ASCII 367;
dcl-c ANSI 437;
dcl-s CRLF char(2) inz(x'0D0A') ccsid(*utf8);
dcl-s UTF8_SLASH char(1) inz('/') ccsid(*utf8);
dcl-s UTF8_QUESTION_MARK char(1) inz('?') ccsid(*utf8);
dcl-s UTF8_SPACE char(1) inz ccsid(*utf8);
dcl-s UTF8_COLON char(1) inz(':') ccsid(*utf8);
dcl-s UPPER char(26) ccsid(*utf8) inz('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
dcl-s LOWER char(26) ccsid(*utf8) inz('abcdefghijklmnopqrstuvwxyz');
dcl-c SERIALIZED_INIT_SIZE 1048576;
  

dcl-ds iv_request_t qualified template;
  method varchar(10);
  url likeds(iv_url_t);
  headers pointer;
  file varchar(1024);
  content pointer;
  contentSize uns(10);
  contentCcsid uns(10);
  binaryContent ind inz(*off);
  headersStreamed ind inz(*off);
  contentStreamed ind inz(*off);
end-ds;


dcl-proc iv_request_new_packedUrl export;
  dcl-pi *n pointer;
    method varchar(12) value;
    url varchar(IV_REQUEST_URL_SIZE) ccsid(*utf8) value;
    acceptMimeType varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8) value options(*nopass);
  end-pi;

  dcl-ds request likeds(iv_request_t) based(ptr);

  ptr = teraspace_alloc(%size(iv_request_t));

  clear request;
  request.method = method;
  request.url = iv_url_parse(url);
  request.headers = sList_new();

  if (%parms() >= 3 and %addr(acceptMimeType) <> *null and %len(acceptMimeType) > 0);
    iv_request_addHeader(ptr : 'accept' : acceptMimeType);
  endif;

  return ptr;
end-proc;


dcl-proc iv_request_new_unpackedUrl export;
  dcl-pi *n pointer;
    method varchar(12) value;
    host pointer value options(*string);
    port int(10) value;
    path pointer value options(*string);
    query pointer value options(*string);
    acceptMimeType varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8) value options(*nopass);
  end-pi;

  dcl-ds request likeds(iv_request_t) based(ptr);

  ptr = teraspace_alloc(%size(iv_request_t));

  clear request;
  request.method = method;
  request.url.host = %str(host : %size(request.url.host));
  request.url.port = port;
  request.url.path = %str(path : %size(request.url.path));
  request.url.query = %str(query : %size(request.url.query));
  request.headers = sList_new();

  if (%parms() >= 6 and %addr(acceptMimeType) <> *null and %len(acceptMimeType) > 0);
    iv_request_addHeader(ptr : 'accept' : acceptMimeType);
  endif;

  return ptr;
end-proc;


dcl-proc iv_request_dispose export;
  dcl-pi *n;
    p_request pointer;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  if (p_request = *null);
    return;
  endif;

  if (request.content <> *null);
    teraspace_free(request.content);
  endif;

  deallocateHeaders(request.headers);

  teraspace_free(p_request);
end-proc;


dcl-proc iv_request_toString export;
  dcl-pi *n likeds(LVARPUCHAR_t);
    p_request pointer value;
  end-pi;

  dcl-ds serialized likeds(LVARPUCHAR_t);
  dcl-ds payload    likeds(LVARPUCHAR_t) inz;
  dcl-s sizeAllocated uns(10);
  dcl-s sizeUsed uns(10);

  dcl-ds request likeds(iv_request_t) based(p_request);
  dcl-ds iterator likeds(SLISTITERATOR_t);
  dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
  dcl-ds nodePayload likeds(SLISTKEYVAL_t) based(node.payloadData);
  dcl-s header  varchar(SERIALIZED_INIT_SIZE) ccsid(*utf8);
  dcl-s headerName varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8);
  dcl-s headerValue varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8);
  dcl-s translatedLength uns(10);
  dcl-s hasContentTypeHeader ind inz(*off);
  dcl-s hasAcceptHeader ind inz(*off);
  dcl-s freePayloadAfter ind;

  // need to build payload before setting the content-length header
  freePayloadAfter = buildPayload (payload : request ) ;

  sizeAllocated = SERIALIZED_INIT_SIZE + payload.Length;
  
  serialized.length = 0;
  serialized.string = teraspace_alloc(sizeAllocated);

  buildMinimalHeader(header  : request);
  
  iterator = sList_setIterator(request.headers);
  dow (sList_foreach(iterator));
    headerName = %str(nodePayload.key.string : nodePayload.key.length);
    headerValue = %str(nodePayload.value.string : nodePayload.value.length);
    // TODO encode header names and values (only ASCII allowed)
    // TODO need to check that we have enough space for the headers when adding them
    header += headerName + UTF8_COLON + headerValue + CRLF;

    if (headerName = 'content-type');
      hasContentTypeHeader = *on;
    endif;

    if (headerName = 'accept');
      hasAcceptHeader = *on;
    endif;
  enddo;

  if (not hasAcceptHeader);
    header  += 'Accept: */*' + CRLF;
    iv_request_addHeader(p_request : 'accept' : '*/*');
  endif;

  if (payload.Length > 0);
    header += 'content-length' + UTF8_COLON + %char(payload.Length) + CRLF;

    if (not hasContentTypeHeader);
      if (request.binaryContent);
        header  += 'content-type: application/octet-stream' + CRLF;
        iv_request_addHeader(p_request : 'content-type' : 'application/octet-stream');
      else;
        header  += 'content-type: text/plain' + CRLF;
        iv_request_addHeader(p_request : 'content-type' : 'text/plain');
      endif;
    endif;
  endif;

  header  += CRLF;

  serialized.length = %len(header);
  memcpy(serialized.string : %addr(header : *data) : %len(header));

  // Append payload if any 
  if payload.length > 0; 
    memcpy(serialized.string + serialized.length: payload.string  : payload.length);
    serialized.length += payload.length;
  endif;

  return serialized;
  
  on-exit;
    if freePayloadAfter;
      teraspace_free(payload.string);
    endif;  
end-proc;


dcl-proc buildPayload;

  dcl-pi *n ind;
    payload  likeds(LVARPUCHAR_t);
    request  likeds(IV_REQUEST_T);
  end-pi;
  
  dcl-s freePayloadAfter ind;
  dcl-s fileDesc int(10) inz(-1);
  dcl-s fileBuffer char(4096) ccsid(*hex);
  dcl-s rc int(10);
  dcl-s c_errno int(10) based(pErrno);

  dcl-c TERA_MAX 2000000000; // 2G

  if (request.content <> *null and request.contentSize > 0);
    if (request.binaryContent);
      payload.length = request.contentSize;
      payload.string = request.content;
      freePayloadAfter = *OFF;
    else;
      // assume the worst : size * 4
      payload.length = request.contentSize * 4;
      payload.string = teraspace_alloc(payload.length);
      payload.length = serializeContent(payload : request);
      payload.string = teraspace_realloc(payload.string : payload.length);
      freePayloadAfter = *On;
    endif;
  elseif (request.file <> *blank);
    payload.string = teraspace_alloc(TERA_MAX); // 2G
    fileDesc = open(request.file : O_RDONLY);
    rc = read(fileDesc : payload.string  : TERA_MAX);
    if (rc < 0); 
        pErrno = errno();
        message_info('Not able to read file ' + request.file + ' : ' + %str(strerror(c_errno):1000));
    else;
        payload.length = rc;
        payload.string = teraspace_realloc(payload.string : payload.length);
    endif;
    freePayloadAfter = *On;
     
  endif;

  return freePayloadAfter;
  
on-exit;
  if (fileDesc >= 0);
    callp close(fileDesc);
  endif;
end-proc;


dcl-proc iv_request_toStream export;
  dcl-pi *n;
    p_request pointer value;
    outstream pointer value;
  end-pi;

  dcl-ds serialized likeds(LVARPUCHAR_t);
  dcl-s sizeAllocated uns(10);
  dcl-s sizeUsed uns(10);

  dcl-ds request likeds(iv_request_t) based(p_request);
  dcl-ds iterator likeds(SLISTITERATOR_t);
  dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
  dcl-ds nodePayload likeds(SLISTKEYVAL_t) based(node.payloadData);
  dcl-s data varchar(SERIALIZED_INIT_SIZE) ccsid(*utf8);
  dcl-s headerName varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8);
  dcl-s headerValue varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8);
  dcl-ds tmpSerializedContent likeds(LVARPUCHAR_t);
  dcl-s translatedLength uns(10);
  dcl-s hasContentTypeHeader ind inz(*off);
  dcl-s hasAcceptHeader ind inz(*off);
  dcl-s fileDesc int(10) inz(-1);
  dcl-s fileBuffer char(4096) ccsid(*hex);
  dcl-s rc int(10);

  if (request.contentSize > SERIALIZED_INIT_SIZE);
      sizeAllocated = SERIALIZED_INIT_SIZE + request.contentSize;
  else;
      sizeAllocated = SERIALIZED_INIT_SIZE;
  endif;

  serialized.length = 0;
  serialized.string = teraspace_alloc(sizeAllocated);

  buildMinimalHeader(data : request);
  
  iterator = sList_setIterator(request.headers);
  dow (sList_foreach(iterator));
    headerName = %str(nodePayload.key.string : nodePayload.key.length);
    headerValue = %str(nodePayload.value.string : nodePayload.value.length);
    // TODO encode header names and values (only ASCII allowed)
    // TODO need to check that we have enough space for the headers when adding them
    data+= headerName + UTF8_COLON + headerValue + CRLF;

    if (headerName = 'content-type');
      hasContentTypeHeader = *on;
    endif;

    if (headerName = 'accept');
      hasAcceptHeader = *on;
    endif;
  enddo;

  if (not hasAcceptHeader);
    data += 'Accept: */*' + CRLF;
    iv_request_addHeader(p_request : 'accept' : '*/*');
  endif;

  if (request.content <> *null);
    // request.contentSize may not be the real size after char conversion
    data+= 'content-length' + UTF8_COLON + %char(request.contentSize) + CRLF;

    if (not hasContentTypeHeader);
      if (request.binaryContent);
        data += 'content-type: application/octet-stream' + CRLF;
        iv_request_addHeader(p_request : 'content-type' : 'application/octet-stream');
      else;
        data += 'content-type: text/plain' + CRLF;
        iv_request_addHeader(p_request : 'content-type' : 'text/plain');
      endif;
    endif;
  endif;

  data += CRLF;

  serialized.length = %len(data);
  stream_write(outstream : %addr(data : *data) : %len(data));

  if (request.content <> *null and request.contentSize > 0);
    if (request.binaryContent);
      stream_write(outstream : request.content : request.contentSize);
    else;
      // assume the worst : size * 4
      tmpSerializedContent.length = request.contentSize * 4;
      tmpSerializedContent.string = teraspace_alloc(tmpSerializedContent.length);
      translatedLength = serializeContent(tmpSerializedContent : request);

      if (serialized.length + translatedLength > sizeAllocated);
        sizeAllocated = serialized.length + translatedLength;
        serialized.string = teraspace_realloc(serialized.string : sizeAllocated);
      endif;

      if (translatedLength > 0);
        stream_write(outstream : tmpSerializedContent.string : translatedLength);
      endif;

      teraspace_free(tmpSerializedContent.string);
    endif;
  elseif (request.file <> *blank);
    fileDesc = open(request.file : O_RDONLY);
    rc = read(fileDesc : %addr(fileBuffer) : %size(fileBuffer));
    dow (rc > 0);
      stream_write(outstream : %addr(fileBuffer) : rc);
      rc = read(fileDesc : %addr(fileBuffer) : %size(fileBuffer));
    enddo;
  endif;

  stream_flush(outstream);

  // Note: no ending CRLF after body !!!
  
  on-exit;
    teraspace_free(serialized.string);
  
    if (fileDesc >= 0);
      callp close(fileDesc);
    endif;
end-proc;


dcl-proc iv_request_addHeader export;
  dcl-pi *n;
    p_request pointer value;
    name varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8) const;
    value varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8) const;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);
  dcl-s lowerName varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8);
  dcl-ds listKey likeds(LVARPUCHAR_t);
  dcl-ds listValue likeds(LVARPUCHAR_t);

  if (name = *blank);
    return;
  endif;

  // TODO use OS API for proper conversion
  lowerName = %xlate(UPPER : LOWER : name);

  listKey.length = %len(lowerName);
  listKey.string = teraspace_alloc(listKey.length + 1);
  %str(listKey.string : listKey.length + 1) = lowerName;
  listValue.length = %len(value);
  listValue.string = teraspace_alloc(listValue.length + 1);
  %str(listValue.string : listValue.length + 1) = value;
  sList_pushLVPC(request.headers : listKey : listValue);
end-proc;


dcl-proc iv_request_addHeaders export;
    dcl-pi *n;
        p_request pointer value;
        headers pointer value;
    end-pi;

    dcl-ds request likeds(iv_request_t) based(p_request);
    dcl-ds iterator likeds(SLISTITERATOR_t);
    dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
    dcl-ds nodePayload likeds(SLISTKEYVAL_t) based(node.payloadData);
    dcl-s headerName varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8);
    dcl-s headerValue varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8);
    
    if (headers = *null);
        return;
    endif;

    iterator = sList_setIterator(headers);
    dow (sList_foreach(iterator));
        headerName = %str(nodePayload.key.string : nodePayload.key.length);
        headerValue = %str(nodePayload.value.string : nodePayload.value.length);
        iv_request_addHeader(p_request : headerName : headerValue);
    enddo;
end-proc;


dcl-proc iv_request_getHeader export;
  dcl-pi *n varchar(8000) ccsid(*utf8);
    p_request pointer value;
    name varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8) const;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);
  dcl-s value varchar(8000) ccsid(*utf8);
  dcl-ds iterator likeds(SLISTITERATOR_t);
  dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
  dcl-ds nodePayload likeds(SLISTKEYVAL_t) based(node.payloadData);
  dcl-s lowerName varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8);
  dcl-s headerName varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8);

  lowerName = %xlate(UPPER : LOWER : name);

  iterator = sList_setIterator(request.headers);
  dow (sList_foreach(iterator));
    headerName = %str(nodePayload.key.string : nodePayload.key.length);

    if (headerName = lowerName);
      value = %str(nodePayload.value.string : nodePayload.value.length);
      leave;
    endif;
  enddo;

  return value;
end-proc;


dcl-proc iv_request_setContentType export;
  dcl-pi *n;
    p_request pointer value;
    contentType varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8) const;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  iv_request_addHeader(p_request : 'content-type' : contentType);
end-proc;


dcl-proc iv_request_setAcceptMimeType export;
  dcl-pi *n;
    p_request pointer value;
    contentType varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8) const;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  iv_request_addHeader(p_request : 'content-type' : contentType);
end-proc;

dcl-proc iv_request_setTextBody export;
  dcl-pi *n;
    p_request pointer value;
    content varchar(1048576) ccsid(1208) value;
    ccsid uns(10) value options(*nopass);
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  if (request.content <> *null);
    teraspace_free(request.content);
  endif;

  request.binaryContent = *off;
  request.contentSize = %len(content);
  request.content = teraspace_alloc(%len(content));
  memcpy(request.content : %addr(content : *data) : %len(content));
  
  if (%parms() >= 3);
    request.contentCcsid = ccsid;
  else;
    request.contentCcsid = 1208;
  endif;
end-proc;


dcl-proc iv_request_setTextBodyBytes export;
  dcl-pi *n;
    p_request pointer value;
    content pointer value;
    size uns(10) value;
    ccsid uns(10) value options(*nopass);
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  if (request.content <> *null);
    teraspace_free(request.content);
  endif;

  request.binaryContent = *off;
  request.contentSize = size;
  if (size > 0);
    request.content = teraspace_alloc(size);
    memcpy(request.content : content : size);
  endif;
  
  if (%parms() >= 4);
    request.contentCcsid = ccsid;
  else;
    request.contentCcsid = 1208;
  endif;
end-proc;


dcl-proc iv_request_setBinaryBody export;
  dcl-pi *n;
    p_request pointer value;
    content pointer value;
    size uns(10) value;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  if (request.content <> *null);
    teraspace_free(request.content);
  endif;

  request.binaryContent = *on;
  request.contentSize = size;
  request.content = teraspace_alloc(size);
  memcpy(request.content : content : size);
end-proc;


dcl-proc iv_request_setFormBody export;
  dcl-pi *n;
    p_request pointer value;
    formData likeds(LVARPUCHAR_t) value;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  // we use binary content here because the form data is already in ASCII and
  // should not be converted to any other CCSID
  request.binaryContent = *on;

  request.contentSize = formData.Length;
  request.content = teraspace_alloc(formData.Length);
  memcpy(request.content : formData.String : formData.Length);

  teraspace_free(formData.String);
end-proc;


dcl-proc iv_request_setFile export;
  dcl-pi *n;
    p_request pointer value;
    file varchar(1024) const;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  request.file = file;
end-proc;


dcl-proc iv_request_hasTextBody export;
  dcl-pi *n ind;
    p_request pointer value;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  return request.content <> *null;
end-proc;


dcl-proc iv_request_hasBody export;
  dcl-pi *n ind;
    p_request pointer value;
  end-pi;

  dcl-ds request likeds(iv_request_t) based(p_request);

  return request.file <> *blank or request.content <> *null;
end-proc;


dcl-proc iv_request_needsStreaming export;
    dcl-pi *n ind;
        p_request pointer value;
    end-pi;
    
    dcl-ds request likeds(iv_request_t) based(p_request);
    
    if (request.file <> *blank);
        return *on;
    elseif (request.contentSize > 1000000);
        return *on;
    else;
        return *off;
    endif;
end-proc;


dcl-proc deallocateHeaders;
  dcl-pi *n;
    list pointer;
  end-pi;

  dcl-ds iterator likeds(SLISTITERATOR_t) inz;
  dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
  dcl-ds payload likeds(SLISTKEYVAL_t) based(node.payloadData);

  iterator = sList_setIterator(list);

  dow (sList_foreach(iterator));
    teraspace_free(payload.key.string);
    teraspace_free(payload.value.string);
  enddo;

  sList_free(list);
end-proc;


dcl-proc serializeContent;
  dcl-pi *n uns(10);
    serialized likeds(LVARPUCHAR_t);
    request    likeds(IV_REQUEST_T) ;
  end-pi;

  dcl-s outLength uns(10);
  dcl-s ccsid int(10);
  dcl-s contentTypeHeader varchar(1000) ccsid(*utf8);

  if (request.content = *null or request.contentSize = 0);
    return 0;
  endif;

  contentTypeHeader = getContentTypeHeader(request.headers);
  ccsid = iv_mime_getCcsid(contentTypeHeader);
  if (ccsid = 0);
    ccsid = 1208; // default to utf-8
  endif;

  iv_debug('Converting content from ' + %char(request.contentCcsid) + ' to ' + %char(ccsid));

  outLength = xlate_translateBuffer(serialized.string  :
      request.content : request.contentSize : request.contentCcsid : ccsid);
  serialized.length = outLength;

  return outLength;
end-proc;


dcl-proc getContentTypeHeader;
  dcl-pi *n varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8);
    list pointer;
  end-pi;

  dcl-ds iterator likeds(SLISTITERATOR_t) inz;
  dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
  dcl-ds payload likeds(SLISTKEYVAL_t) based(node.payloadData);

  iterator = sList_setIterator(list);

  dow (sList_foreach(iterator));
    if (%str(payload.key.string : payload.key.length) = 'content-type');
      return %str(payload.value.string : payload.value.length);
    endif;
  enddo;

  return *blank;
end-proc;


dcl-proc buildMinimalHeader;
  dcl-pi *n;
    data varchar(SERIALIZED_INIT_SIZE) ccsid(*utf8);
    request likeds(iv_request_t);
  end-pi;

  if (request.method = 'CONNECT');
    buildConnectHeader(data : request);
  else;
    buildNonConnectHeader(data : request);
  endif;
end-proc;


dcl-proc buildConnectHeader;
  dcl-pi *n;
    data varchar(SERIALIZED_INIT_SIZE) ccsid(*utf8);
    request likeds(iv_request_t);
  end-pi;

  data = request.method + UTF8_SPACE + request.url.host + UTF8_COLON + %char(request.url.port) + ' HTTP/1.1' + CRLF;
  data += 'Host: ' + request.url.host + UTF8_COLON + %char(request.url.port) + CRLF;
  data += 'Connection: keep-alive' + CRLF;
end-proc;


dcl-proc buildNonConnectHeader;
  dcl-pi *n;
    data varchar(SERIALIZED_INIT_SIZE) ccsid(*utf8);
    request likeds(iv_request_t);
  end-pi;

  data = request.method + UTF8_SPACE;
  if (%len(request.url.path) = 0);
    data += UTF8_SLASH;
  else;
    data += request.url.path;
  endif;
  if (%len(request.url.query) > 0);
    data += UTF8_QUESTION_MARK + request.url.query;
  endif;
  data += ' HTTP/1.1' + CRLF;
  data += 'Host: ' + request.url.host + UTF8_COLON + %char(request.url.port) + CRLF;
  data += 'Connection: keep-alive' + CRLF;
end-proc;

