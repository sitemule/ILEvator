**FREE

ctl-opt nomain thread(*concurrent);


/include 'stream.rpginc'
/include 'stream_int.rpginc'


dcl-proc iv_stream_hasMore export;
  dcl-pi *n ind;
    pStream pointer const;
  end-pi;
  
  dcl-ds stream likeds(iv_stream_t) based(pStream);
  dcl-pr hasMore ind extproc(stream.hasMore);
    stream pointer const;
  end-pr;
  
  if (pStream = *null);
    return *off;
  endif; 
  
  return hasMore(pStream);
end-proc;


dcl-proc iv_stream_setBlockSize export;
  dcl-pi *n;
    pStream pointer const;
    blockSize uns(10) value;
  end-pi;
  
  dcl-ds stream likeds(iv_stream_t) based(pStream);
  
  stream.blockSize = blockSize;
end-proc;


dcl-proc iv_stream_read export;
  dcl-pi *n likeds(iv_stream_buffer_t);
    pStream pointer const;
  end-pi;
  
  dcl-ds stream likeds(iv_stream_t) based(pStream);
  dcl-ds buffer likeds(iv_stream_buffer_t) inz;
  dcl-pr read likeds(iv_stream_buffer_t) extproc(stream.read);
    stream pointer const;
  end-pr;
  
  if (pStream = *null);
    return buffer;
  endif; 
  
  return read(pStream);
end-proc;


dcl-proc iv_stream_write export;
  dcl-pi *n ind;
    pStream pointer const;
    data pointer const;
    length uns(10) value;
  end-pi;

  dcl-ds stream likeds(iv_stream_t) based(pStream);
  dcl-pr write ind extproc(stream.write);
    stream pointer const;
    data pointer const;
    length uns(10) value;
  end-pr;
  
  if (pStream = *null);
    return *off;
  endif;
  
  return write(pstream : data : length);
end-proc;


dcl-proc iv_stream_finalize export;
  dcl-pi *n;
    pStream pointer;
  end-pi;
  
  dcl-ds stream likeds(iv_stream_t) based(pStream);
  dcl-pr finalize extproc(stream.finalize);
    stream pointer;
  end-pr;
  
  if (pStream = *null);
    return;
  endif;
  
  finalize(pStream);
end-proc;
