**FREE


ctl-opt nomain thread(*concurrent);


/include 'base64.rpginc'
/include 'encode.rpginc'
/include 'libc.rpginc'
/include 'message.rpginc'
/include 'mime.rpginc'
/include 'multipart.rpginc'
/include 'request.rpginc'
/include 'simpleList.rpginc'
/include 'stream.rpginc'
/include 'teraspace.rpginc'
/include 'xlate.rpginc'

dcl-pr CEERAN0 extproc('CEERAN0');
    seed int(10);
    randomNumber float(8);
    feedback char(12) options(*omit);
end-pr;

dcl-pr unlink int(10) extproc('unlink');
    path pointer value options(*string : *trim);
end-pr;

dcl-pr open int(10) extproc('open');
    path pointer value options(*string);
    openflags int(10) value;
    mode uns(10) value options(*nopass);
    ccsid uns(10) value options(*nopass);
    textCreateId uns(10) value options(*nopass);
end-pr;

dcl-pr read int(10) extproc('read');
    fileDesc int(10) value;
    buffer pointer value;
    length uns(10) value;
end-pr;

dcl-pr write int(10) extproc('write');
    fileDesc int(10) value;
    buffer pointer value;
    length uns(10) value;
end-pr;
     
dcl-pr close int(10) extproc('close');
    fileDesc int(10) value;
end-pr;

dcl-c S_IRUSR 256;
dcl-c S_IWUSR 128;
     
dcl-c O_RDONLY 1;
dcl-c O_WRONLY 2;
dcl-c O_CREATE 8;
dcl-c O_APPEND 256;

dcl-c IV_MULTIPART_HEADER_NAME_SIZE 1024;
dcl-c IV_MULTIPART_HEADER_VALUE_SIZE 16384;
dcl-c IV_MULTIPART_HEADER_SIZE 17408;

dcl-c ASCII 437;

dcl-s CRLF char(2) ccsid(*hex) inz(x'0D0A');

dcl-ds iv_multipart_handler_t qualified template;
    processRequest pointer(*proc);
    mimeType varchar(1000);
    tempFile varchar(100);
    boundary varchar(70) ccsid(ASCII);
    finalized ind;
    partCount int(10);
    contentSize int(10);
end-ds;

dcl-s contentTransferEncodings char(10) dim(3) ctdata;
dcl-s ccsidsForBase64Encoding uns(5) dim(3) ctdata;


dcl-proc iv_multipart_new export;
    dcl-pi *n pointer;
        mimeType varchar(1000) const options(*nopass);
        boundary varchar(70) value ccsid(ASCII) options(*nopass);
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(ptr);
  
    ptr = teraspace_alloc(%size(handler));
    clear handler;
  
    handler.processRequest = %paddr(iv_multipart_processRequest);
    handler.finalized = *off;
  
    if (%parms() = 0);
        handler.mimeType = IV_MULTIPART_MEDIA_TYPE;
    else;
        handler.mimeType = mimeType;
    endif;

    handler.tempFile = '/tmp/ilevator-multipart-' + %subst(%str(tmpnamIFS(*omit) : 39) : 6) + '.tmp';
    
    if (%parms() >= 2);
        handler.boundary = boundary;
    else;
        handler.boundary = generateBoundary();
    endif;
    
    return ptr;
end-proc;


dcl-proc iv_multipart_processRequest export;
    dcl-pi *n;
        handler pointer value;
        request pointer value;
    end-pi;

    dcl-ds requestHandler likeds(iv_multipart_handler_t) based(handler);
    
    iv_request_addHeader(request : 'Content-Type' : requestHandler.mimeType + '; boundary=' + requestHandler.boundary);
    iv_request_addHeader(request : 'Content-Length' : %char(requestHandler.contentSize));
    iv_request_setFile(request : requestHandler.tempFile);
end-proc;


dcl-proc iv_multipart_free export;
    dcl-pi *n;
        p_handler pointer;
        boundary pointer const options(*string : *nopass);
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);

    unlink(handler.tempFile);
    
    teraspace_free(p_handler);
end-proc;


dcl-proc iv_multipart_finalize export;
    dcl-pi *n;
        p_handler pointer;
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s fileDesc int(10) inz(-1);
    
    if (handler.finalized);
        return;
    endif;
    
    fileDesc = openTempFile(p_handler);
    if (fileDesc >= 0);
        writeEndingBoundary(p_handler : fileDesc);
        handler.finalized = *on;
    endif;
    
    on-exit;
        if (fileDesc >= 0);
            callp close(fileDesc);
        endif;
end-proc;


dcl-proc iv_multipart_addPartFromString export;
    dcl-pi *n;
        p_handler pointer value;
        fieldName varchar(100) ccsid(1208) value;
        p_content varchar(1048576) ccsid(1208) value;
        p_encoding uns(3) value options(*nopass);
        headers pointer value options(*nopass);
    end-pi;
    
    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s ccsid uns(5) inz(819); // 819 = ISO-8859-1 (Latin-1)
    dcl-s fileDesc int(10) inz(-1);
    dcl-s content varchar(1048576) ccsid(*hex);
    dcl-s xlatedLength uns(10);
    dcl-s encoding uns(3) inz(IV_MULTIPART_ENCODING_TEXT);
    
    if (handler.finalized);
        return;
    endif;
    
    if (%len(p_content) = 0);
        return;
    endif;
    
    if (%parms() >= 4);
        encoding = p_encoding;
    endif;
    
    if (%parms() >= 5);
        ccsid = getCcsidFromHeaders(headers : ccsid);
    endif;

    if (needsBase64Encoding(ccsid));
        encoding = IV_MULTIPART_ENCODING_BASE64;
    endif;
    
    if (ccsid = 1208);
        content = p_content;
    else;
        %len(content) = 1048576;
        xlatedLength = xlate_translateBuffer(%addr(content : *data) : %addr(p_content : *data) : %len(p_content) : 1208 : ccsid);
        %len(content) = xlatedLength;
    endif;

    fileDesc = openTempFile(p_handler);
    if (fileDesc >= 0);
        writeBoundary(p_handler : fileDesc);

        writeHeader(p_handler : fileDesc : 'Content-Disposition: form-data; name="' + iv_encode_url(fieldName) + '"');
        if (%elem(contentTransferEncodings) >= encoding);
            writeHeader(p_handler : fileDesc : 'Content-Transfer-Encoding: ' + %trim(contentTransferEncodings(encoding)));
        endif;
        
        if (%parms() >= 5);
            if (not containsHeader(headers : 'content-type'));
                writeHeader(p_handler : fileDesc : 'Content-Type: text/plain');
            endif;
            writeHeaders(p_handler : fileDesc : headers);
        else;
            writeHeader(p_handler : fileDesc : 'Content-Type: text/plain');
        endif;
        
        // write body content delimiter (CRLF)
        writeMessageBody(p_handler : fileDesc : %addr(CRLF) : 2);
        
        if (encoding = IV_MULTIPART_ENCODING_BASE64);
            writeMessageBodyBase64(p_handler : fileDesc : %addr(content : *data) : %len(content));
        else;
            // just write the content
            writeMessageBody(p_handler : fileDesc : %addr(content : *data) : %len(content));
        endif;
    else;
        message_escape('Could not open temporary file for adding multipart message part.');
    endif;
    
    handler.partCount += 1;
    
    on-exit;
        if (fileDesc >= 0);
            callp close(fileDesc);
        endif;
end-proc;


dcl-proc iv_multipart_addPartFromFile export;
    dcl-pi *n;
        p_handler pointer value;
        fieldName varchar(100) ccsid(1208) value;
        path pointer value options(*string);
        p_filename varchar(1000) ccsid(1208) value options(*nopass);
        p_encoding uns(3) value options(*nopass);
        headers pointer value options(*nopass);
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s fileDesc int(10) inz(-1);
    dcl-s encoding uns(3) inz(IV_MULTIPART_ENCODING_BASE64);
    dcl-s inputDesc int(10) inz(-1);
    dcl-s inputBuffer char(155648);
    dcl-s filename varchar(1000) ccsid(1208);
    dcl-s rc int(10);
    
    if (handler.finalized);
        return;
    endif;
    
    if (%parms() >= 4);
        filename = p_filename;
    else;
        filename = getLastPathElement(%str(path : 10000));
    endif;
    
    if (%parms() >= 5);
        encoding = p_encoding;
    endif;

    if (not (encoding = IV_MULTIPART_ENCODING_BASE64 or encoding = IV_MULTIPART_ENCODING_BINARY));
        message_escape('Unsupported content transfer encoding. Only base64 and binary are supported.');
    endif;
    
    fileDesc = openTempFile(p_handler);
    if (fileDesc >= 0);
        writeBoundary(p_handler : fileDesc);

        // Unicode characters in filenames are described in https://datatracker.ietf.org/doc/html/rfc6266#section-5
        writeHeader(p_handler : fileDesc : 'Content-Disposition: form-data; ' +
                'name="' + iv_encode_url(fieldName) + '"; ' + 
                'filename="' + iv_encode_url(filename) + '"');
                // unicode chars in filename not working yet: 'filename*=utf-8''''' + iv_encode_url(filename));
        if (%elem(contentTransferEncodings) >= encoding);
            writeHeader(p_handler : fileDesc : 'Content-Transfer-Encoding: ' + %trim(contentTransferEncodings(encoding)));
        endif;
        
        if (%parms() >= 6);
            if (not containsHeader(headers : 'content-type'));
                writeHeader(p_handler : fileDesc : 'Content-Type: application/octet-stream');
            endif;
            writeHeaders(p_handler : fileDesc : headers);
        else;
            writeHeader(p_handler : fileDesc : 'Content-Type: application/octet-stream');
        endif;
        
        // write body content delimiter (CRLF)
        writeMessageBody(p_handler : fileDesc : %addr(CRLF) : 2);
        
        inputDesc = open(path : O_RDONLY);
        if (inputDesc < 0);
            message_escape('Could not open file ' + %str(path : 1024));
        endif;
        
        rc = read(inputDesc : %addr(inputBuffer) : %size(inputBuffer));
        dow (rc > 0);
            if (encoding = IV_MULTIPART_ENCODING_BASE64);
                writeMessageBodyBase64(p_handler : fileDesc : %addr(inputBuffer) : rc);
            elseif (encoding = IV_MULTIPART_ENCODING_BINARY);
                writeMessageBody(p_handler : fileDesc : %addr(inputBuffer) : rc);
            endif;
            rc = read(inputDesc : %addr(inputBuffer) : %size(inputBuffer));
        enddo;
         
        callp close(inputDesc);
    else;
        message_escape('Could not open temporary file for adding multipart message part.');
    endif;
    
    handler.partCount += 1;
    
    on-exit;
        if (fileDesc >= 0);
            callp close(fileDesc);
        endif;
end-proc;


dcl-proc iv_multipart_addPartFromBytes export;
    dcl-pi *n;
        p_handler pointer value;
        fieldName varchar(100) ccsid(1208) value;
        content pointer value;
        length uns(10) value;
        p_encoding uns(3) value options(*nopass);
        headers pointer value options(*nopass);
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s fileDesc int(10) inz(-1);
    dcl-s encoding uns(3) inz(IV_MULTIPART_ENCODING_BINARY);
    
    if (handler.finalized);
        return;
    endif;
    
    if (length = 0 or content = *null);
        return;
    endif;
    
    if (%parms() >= 5);
        encoding = p_encoding;
    endif;
    
    fileDesc = openTempFile(p_handler);
    if (fileDesc >= 0);
        writeBoundary(p_handler : fileDesc);

        writeHeader(p_handler : fileDesc : 'Content-Disposition: form-data; name="' + iv_encode_url(fieldName) + '"');
        if (%elem(contentTransferEncodings) >= encoding);
            writeHeader(p_handler : fileDesc : 'Content-Transfer-Encoding: ' + %trim(contentTransferEncodings(encoding)));
        endif;
        
        if (%parms() >= 6);
            if (not containsHeader(headers : 'content-type'));
                writeHeader(p_handler : fileDesc : 'Content-Type: application/octet-stream');
            endif;
            writeHeaders(p_handler : fileDesc : headers);
        else;
            writeHeader(p_handler : fileDesc : 'Content-Type: application/octet-stream');
        endif;
        
        // write body content delimiter (CRLF)
        writeMessageBody(p_handler : fileDesc : %addr(CRLF) : 2);
        
        if (encoding = IV_MULTIPART_ENCODING_BASE64);
            writeMessageBodyBase64(p_handler : fileDesc : content : length);
        else;
            // just write the content
            writeMessageBody(p_handler : fileDesc : content : length);
        endif;
    else;
        message_escape('Could not open temporary file for adding multipart message part.');
    endif;
    
    handler.partCount += 1;
    
    on-exit;
        if (fileDesc >= 0);
            callp close(fileDesc);
        endif;
end-proc;


dcl-proc iv_multipart_toStream export;
    dcl-pi *n;
        p_handler pointer value;
        outstream pointer value;
    end-pi;
    
    dcl-c BUFFER_SIZE 4096; // file system block size = 4096
    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s fileDesc int(10) inz(-1);
    dcl-s buffer char(BUFFER_SIZE) ccsid(*hex);
    dcl-s rc int(10);
    
    fileDesc = openTempFileReadOnly(p_handler);
    
    rc = read(fileDesc : %addr(buffer) : %size(buffer));
    dow (rc > 0);
        stream_write(outstream : %addr(buffer) : rc);
        rc = read(fileDesc : %addr(buffer) : %size(buffer));
    enddo;
    
    stream_flush(outstream);
    
    on-exit;
        if (fileDesc >= 0);
            callp close(fileDesc);
        endif;
end-proc;


dcl-proc needsBase64Encoding;
    dcl-pi *n ind;
        ccsid uns(5) value;
    end-pi;

    return %lookup(ccsid : ccsidsForBase64Encoding) > 0;
end-proc;



dcl-proc getCcsidFromHeaders;
    dcl-pi *n uns(5);
        headers pointer;
        defaultValue uns(5) const;
    end-pi;
    
    dcl-ds iterator likeds(SLISTITERATOR_t);
    dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
    dcl-ds nodePayload likeds(SLISTKEYVAL_t) based(node.payloadData);
    dcl-s headerName varchar(IV_MULTIPART_HEADER_NAME_SIZE) ccsid(*utf8);
    dcl-s headerValue varchar(IV_MULTIPART_HEADER_VALUE_SIZE) ccsid(*utf8);
    dcl-s ccsid uns(5);

    iterator = sList_setIterator(headers);
    dow (sList_foreach(iterator));
        headerName = %str(nodePayload.key.string : nodePayload.key.length);
        headerValue = %str(nodePayload.value.string : nodePayload.value.length);
    
        if (headerName = 'content-type');
          ccsid = iv_mime_getCcsid(headerValue);
        endif;
    enddo;
    
    if (ccsid = 0);
        return defaultValue;
    else;
        return ccsid;
    endif;
end-proc;


dcl-proc writeBoundary export;
    dcl-pi *n;
        p_handler pointer value;
        fileDesc int(10) value;
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s boundaryPrefix char(2) inz('--') ccsid(ASCII);
    
    if (handler.partCount > 0);
        writeMessageBody(p_handler : fileDesc : %addr(CRLF) : 2);
    endif;
    
    writeMessageBody(p_handler : fileDesc : %addr(boundaryPrefix) : 2);
    writeMessageBody(p_handler : fileDesc : %addr(handler.boundary : *data) : %len(handler.boundary));
    writeMessageBody(p_handler : fileDesc : %addr(CRLF) : 2);
end-proc;


dcl-proc writeEndingBoundary export;
    dcl-pi *n;
        p_handler pointer value;
        fileDesc int(10) value;
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s boundaryPrefix char(2) inz('--') ccsid(ASCII);
    
    writeMessageBody(p_handler : fileDesc : %addr(CRLF) : 2);
    writeMessageBody(p_handler : fileDesc : %addr(boundaryPrefix) : 2);
    writeMessageBody(p_handler : fileDesc : %addr(handler.boundary : *data) : %len(handler.boundary));
    writeMessageBody(p_handler : fileDesc : %addr(boundaryPrefix) : 2);
end-proc;


dcl-proc writeHeader;
    dcl-pi *n;
        handler pointer value;
        fileDesc int(10) value;
        header varchar(IV_MULTIPART_HEADER_SIZE) ccsid(*utf8) value;
    end-pi;
    
    writeMessageBody(handler : fileDesc : %addr(header : *data) : %len(header));
    writeMessageBody(handler : fileDesc : %addr(CRLF) : 2);
end-proc;


dcl-proc containsHeader;
    dcl-pi *n ind;
        headers pointer value;
        p_headerName varchar(IV_MULTIPART_HEADER_NAME_SIZE) ccsid(*utf8) const;
    end-pi;

    dcl-ds iterator likeds(SLISTITERATOR_t);
    dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
    dcl-ds nodePayload likeds(SLISTKEYVAL_t) based(node.payloadData);
    dcl-s headerName varchar(IV_MULTIPART_HEADER_NAME_SIZE) ccsid(*utf8);

    iterator = sList_setIterator(headers);
    dow (sList_foreach(iterator));
        headerName = %str(nodePayload.key.string : nodePayload.key.length);
        if (p_headerName = headerName);
          return *on;
        endif;
    enddo;
    
    return *off;
end-proc;


dcl-proc writeHeaders;
    dcl-pi *n;
        handler pointer value;
        fileDesc int(10) value;
        headers pointer value;
    end-pi;

    dcl-ds iterator likeds(SLISTITERATOR_t);
    dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
    dcl-ds nodePayload likeds(SLISTKEYVAL_t) based(node.payloadData);
    dcl-s headerName varchar(IV_MULTIPART_HEADER_NAME_SIZE) ccsid(*utf8);
    dcl-s headerValue varchar(IV_MULTIPART_HEADER_VALUE_SIZE) ccsid(*utf8);
    dcl-s ccsid uns(5);
    dcl-s separator char(2) ccsid(*utf8) inz(': ');
    dcl-s header varchar(IV_MULTIPART_HEADER_SIZE) ccsid(*utf8);

    iterator = sList_setIterator(headers);
    dow (sList_foreach(iterator));
        headerName = %str(nodePayload.key.string : nodePayload.key.length);
        headerValue = %str(nodePayload.value.string : nodePayload.value.length);
        header = headerName + separator + headerValue + CRLF;
        writeMessageBody(handler : fileDesc : %addr(header : *data) : %len(header));
    enddo;
end-proc;


dcl-proc writeMessageBody export;
    dcl-pi *n;
        p_handler pointer value;
        fileDesc int(10) value;
        buffer pointer value;
        length uns(10) value;
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    
    callp write(fileDesc : buffer : length);
    
    handler.contentSize += length;
end-proc;


dcl-proc writeMessageBodyBase64 export;
    dcl-pi *n;
        p_handler pointer value;
        fileDesc int(10) value;
        buffer pointer value;
        length uns(10) value;
    end-pi;

    dcl-c BASE64_INPUT_BLOCK_SIZE 155648;
    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s currentBuffer pointer;
    dcl-s currentBufferLength int(10);
    dcl-s fileBuffer char(159744);
    dcl-s encodedLength int(20);
    dcl-s restLength uns(10);
    
    if (length = 0);
        return;
    endif;
    
    currentBuffer = buffer;
    restLength = length;
    
    // best practice : base64 encoded and split lines at 76 + CRLF which makes 78 bytes per line.
    // 76 = base64 encodes 3 bytes to a result of 4 bytes. 76 is a multiple of 4 and less than 80 
    // (which is the historically preferred line length).
    //
    // File buffer is 159744 bytes. That is a multiple of 4096 which is the file system block size.
    // 159744 is also a multiple of 78 (single base64 encoded line: 76 encoded bytes + CRLF
    //
    // So we will always write full lines and use the file system block size optimally.
    // We will write 2048 lines (159744 / 78).
    //
    // The buffer for base64 encoding is the number of lines multiplied with 76 = 155648.
    //
    
    dou (restLength <= 0);
        if (restLength > BASE64_INPUT_BLOCK_SIZE);
            currentBufferLength = BASE64_INPUT_BLOCK_SIZE;
        else;
            currentBufferLength = restLength;
        endif;
        restLength -= currentBufferLength;
        
        encodedLength = base64_encodeBuffer(%addr(fileBuffer) : currentBuffer : currentBufferLength);
        if (encodedLength > 0);
            encodedLength = splitLines(fileBuffer : encodedLength);
            callp write(fileDesc : %addr(fileBuffer) : encodedLength);
            handler.contentSize += encodedLength;
        endif;
        
        if (restLength > 0);
            currentBuffer += currentBufferLength;
        endif;
    enddo;
end-proc;


dcl-proc splitLines export;
    dcl-pi *n int(20);
        buffer char(159744);
        bufferLength int(20);
    end-pi;

    dcl-s bufferPtr pointer;
    dcl-s tempBuffer char(159744);
    dcl-s tempBufferPtr pointer;
    dcl-s restLength int(20);
    dcl-s writtenBytes int(20);
    dcl-s lineLength uns(5);
    dcl-s CRLF char(2) ccsid(*hex) inz(x'0D0A');
    dcl-s crlfPtr pointer;
    
    if (bufferLength = 0);
        return 0;
    endif;
    
    restLength = bufferLength;
    
    memcpy(%addr(tempBuffer) : %addr(buffer) : bufferLength);
    tempBufferPtr = %addr(tempBuffer);
    bufferPtr = %addr(buffer);
    crlfPtr = %addr(CRLF);
    
    dou (restLength <= 0);
        if (restLength > 76);
            lineLength = 76;
        else;
            lineLength = restLength;
        endif;
        
        memcpy(bufferPtr : tempBufferPtr : lineLength);
        writtenBytes += lineLength;
        
        restLength -= lineLength;
        if (restLength > 0);
            tempBufferPtr += lineLength;
            bufferPtr += lineLength;
            memcpy(bufferPtr : crlfPtr : 2);
            bufferPtr += 2;
            writtenBytes += 2;
        endif;
    enddo;
    
    return writtenBytes;
end-proc;


dcl-proc openTempFile export;
    dcl-pi *n int(10);
        p_handler pointer;
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s fileDesc int(10);
    
    fileDesc = open(handler.tempFile : O_WRONLY + O_CREATE + O_APPEND : S_IRUSR + S_IWUSR);
    
    return fileDesc;
end-proc;


dcl-proc openTempFileReadOnly export;
    dcl-pi *n int(10);
        p_handler pointer;
    end-pi;

    dcl-ds handler likeds(iv_multipart_handler_t) based(p_handler);
    dcl-s fileDesc int(10);
    
    fileDesc = open(handler.tempFile : O_RDONLY);
    
    return fileDesc;
end-proc;

    
dcl-proc generateBoundary export;
    dcl-pi *n varchar(70) end-pi;

    dcl-s boundary varchar(70);
    dcl-s seed int(10);
    dcl-s randomNumber float(8);
    
    CEERAN0(seed : randomNumber : *omit);
    boundary = %subst(%str(tmpnamIFS(*omit) : 39) : 6) + %char(randomNumber);
    boundary = %xlate('.-+' : 'XXX' : boundary);
        
    return boundary;
end-proc;


dcl-proc getLastPathElement export;
    dcl-pi *n varchar(1000) ccsid(1208);
        path varchar(10000) ccsid(1208) value;
    end-pi;

    dcl-s x uns(5);
    dcl-s slash char(1) ccsid(1208) inz('/');
    
    x = %scanr(slash : path);
    if (x = 0);
        return path;
    elseif (x = %len(path));
        return path;
    else;
        return %subst(path : x+1);
    endif;
end-proc;


**CTDATA contentTransferEncodings
binary
8bit
base64
**CTDATA ccsidsForBase64Encoding
 1200
 1208
13488