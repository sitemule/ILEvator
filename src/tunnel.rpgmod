**FREE

ctl-opt nomain thread(*concurrent);


/include 'anychar.rpginc'
/include 'api.rpginc'
/include 'chunked.rpginc'
/include 'debug.rpginc'
/include 'httpclient.rpginc'
/include 'request.rpginc'
/include 'simpleList.rpginc'
/include 'sockets.rpginc'
/include 'teraspace.rpginc'
/include 'tunnel.rpginc'
/include 'url.rpginc'


dcl-s ENUM int(3) template;
dcl-c FALSE 0;
dcl-c TRUE 1;
dcl-c NULL x'00';


dcl-pr fclose int(10) extproc('_C_IFS_fclose');
    stream pointer value;
end-pr;


dcl-proc iv_tunnel_connect export;
    dcl-pi *n ind;
        p_client pointer value;
        targetUrl pointer options(*string) value;
        p_proxyUrl pointer options(*string) value;
        headers pointer value options(*nopass);        
    end-pi;

    dcl-ds client likeds(ilevator_t) based(p_client);
    dcl-s apiStatus int(10) inz(IV_STATUS_RETRY);
    dcl-s try int(5);
    dcl-s ok like(ENUM);
    dcl-ds proxyUrl likeds(iv_url_t);
    
    client.method = teraspace_strTrimDup('CONNECT');
    client.url    = teraspace_strTrimDup(targetUrl);
    
    parseUrl(p_client : targetUrl); 
    proxyUrl = iv_url_parse(%str(p_proxyUrl : IV_URL_SIZE));
    
    for try = 0 to client.retries;

        ok = sockets_connect(
            client.sockets : 
            proxyUrl.host : 
            proxyUrl.port : 
            client.timeout * 1000 // from seconds to milliseconds
        );
        if (ok = TRUE);
          apiStatus = IV_STATUS_OK;
        else;
          apiStatus = IV_STATUS_ERROR;
          iter;
        endif;

        apiStatus = sendRequest(p_client);
        if (apiStatus = IV_STATUS_ERROR);
            leave; 
        endif;
        
        apiStatus = receiveHeader(p_client);
        if (apiStatus = IV_STATUS_ERROR);
            leave; 
        endif;
        if (apiStatus = IV_STATUS_RETRY);
            iter; 
        endif;
        
        iv_debug('HTTP response status: %s' : %char(client.status));

        // status 204 => no content
        if (client.status = 204);
            // No content, don't read any longer
            apiStatus = IV_STATUS_OK;
        elseif (client.responseIsChunked);
            apiStatus = iv_chunked_receive(p_client);
        else;
            apiStatus = receiveData(p_client);
        endif;

        if (apiStatus = IV_STATUS_OK);
            leave; 
        endif;
        if (apiStatus = IV_STATUS_ERROR);
            leave; 
        endif;
        if (apiStatus = IV_STATUS_RETRY);
            iter;
        endif;
        
    endfor;

    iv_anychar_finalize(%addr(client.responseHeaderBuffer));
    iv_anychar_finalize(%addr(client.responseDataBuffer));

    if (client.responseDataFile <> *null);
        fclose(client.responseDataFile);
    endif;

    return (apiStatus = IV_STATUS_OK);
end-proc;


dcl-proc iv_tunnel_send export;
    dcl-pi *n;
        p_client pointer value;
        bytes pointer value;
        length uns(10) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(p_client);
    dcl-s rc int(10);
    
    rc = sockets_send (client.sockets : bytes : length); 
    dsply %char(rc);
    // return (rc == requestString.Length ? API_OK : API_ERROR);
    // TODO return value

    // TODO 
end-proc;


dcl-proc iv_tunnel_close export;
    dcl-pi *n;
        client pointer value;
    end-pi;

    // TODO
end-proc;
