**FREE

ctl-opt nomain thread(*concurrent);


/include 'base64.rpginc'
/include 'clib.rpginc'
/include 'debug.rpginc'
/include 'encode.rpginc'


dcl-s NOT_RESERVED_CHARS char(65) ccsid(*utf8) inz('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.');
dcl-c ASCII 850;
dcl-c IV_ENCODE_TILDE %ucs2('~');


dcl-proc iv_encode_url export;
  dcl-pi *n varchar(4194304) ccsid(*utf8) rtnparm;
    source varchar(1048576) ccsid(*utf8) value; 
  end-pi;

  dcl-s encoded varchar(4194304) ccsid(*utf8);
  dcl-s encodedLength int(10);
  
  %len(encoded) = 4194304; 

  encodedLength = urlEncode(%addr(source : *data) : %len(source) : %addr(encoded : *data) : %len(encoded) : *off);
  %len(encoded) = encodedLength;

  return encoded;
end-proc;


dcl-proc iv_encode_formUrl export;
  dcl-pi *n varchar(4194304) ccsid(*utf8) rtnparm;
    source varchar(1048576) ccsid(*utf8) value; 
  end-pi;
  
  dcl-s encoded varchar(4194304) ccsid(*utf8);
  dcl-s encodedLength int(10);
  
  %len(encoded) = 4194304; 

  encodedLength = urlEncode(%addr(source : *data) : %len(source) : %addr(encoded : *data) : %len(encoded) : *on);
  %len(encoded) = encodedLength;

  return encoded;
end-proc;


dcl-proc iv_encode_path export;
  dcl-pi *n varchar(32766) ccsid(*utf8);
    source varchar(32766) ccsid(*utf8) value; 
  end-pi;
  
  dcl-s encoded varchar(32766) ccsid(*utf8);
  dcl-s encodedLength int(10);
  
  %len(encoded) = 32766; 

  encodedLength = urlEncode(%addr(source : *data) : %len(source) : %addr(encoded : *data) : %len(encoded) : *off);
  %len(encoded) = encodedLength;

  return encoded;
end-proc;


dcl-proc iv_encode_query export;
  dcl-pi *n varchar(32766) ccsid(*utf8);
    key varchar(1000) ccsid(*utf8) value;
    value varchar(32766) ccsid(*utf8) value;
  end-pi;
  
  dcl-s encoded varchar(32766) ccsid(*utf8);
  dcl-s encodedKeyLength uns(10);
  dcl-s encodedValueLength uns(10);
  dcl-s equalSign char(1) ccsid(*utf8) inz('=');
  dcl-s c char(1) ccsid(*utf8) based(ptr);
  
  %len(encoded) = 32766; 

  encodedKeyLength = urlEncode(%addr(key : *data) : %len(key) : %addr(encoded : *data) : %len(encoded) : *off);
  
  ptr = %addr(encoded : *data) + encodedKeyLength;
  c = equalSign;
  
  encodedValueLength = urlEncode(%addr(value : *data) : %len(value) : %addr(encoded : *data) + encodedKeyLength + 1: %len(encoded) - encodedKeyLength: *off);
  %len(encoded) = encodedKeyLength + encodedValueLength + 1; // + 1 for the = sign between key and value

  return encoded;
end-proc;


dcl-proc urlEncode;
  dcl-pi *n uns(10);
    source pointer value;
    sourceLength uns(10) value;
    output pointer value;
    outputMaxLength uns(10) const;
    formUrlEncoding ind const;
  end-pi;

  dcl-s sourceChar char(1) ccsid(*utf8) based(sourcePtr);
  dcl-s i int(10);
  dcl-s x int(10);
  dcl-s encodedChar char(1) ccsid(ASCII) based(encodedPtr);
  dcl-s encodedChar2 char(2) ccsid(ASCII) based(encodedPtr);
  dcl-s encodedLength int(10);
  dcl-s hex char(2);
  dcl-s hexAscii char(2) ccsid(ASCII);
  
  for i = 1 to sourceLength;
    if (encodedLength = 0);
      encodedPtr = output;
    else;
      encodedPtr += 1;
    endif;
    
    if (encodedLength + 3 > outputMaxLength);
      leave;
    endif;

    sourcePtr = source + i - 1;
    x = %scan(sourceChar : NOT_RESERVED_CHARS);
    if (sourceChar = IV_ENCODE_TILDE or x = 0);
      // need encoding
      
      if (formUrlEncoding and sourceChar = *blank);
        encodedChar = '+';
        encodedLength += 1;
      else;
        encodedChar = '%';
        
        encodedPtr += 1;
        cvthc(%addr(hex) : %addr(sourceChar) : 2);
        hexAscii = hex;  // automatic conversion from ebcdic to ascii
        encodedChar2 = hexAscii;
        
        encodedPtr += 1; // as we have copied 2 bytes previously
        
        encodedLength += 3;
      endif;
    else;
      // no encoding needed
      encodedChar = sourceChar;
      encodedLength += 1;
    endif;
  endfor;

  return encodedLength;
end-proc;


dcl-proc iv_encode_punycode export;
    dcl-pi *n varchar(32766);
        p_value varchar(32766) const;
    end-pi;
    
    // Service program: QICU/QXICUUC40
    //
    // U_CFUNC int32_t
    // u_strToPunycode(const UChar *src, int32_t srcLength,
    //                 UChar *dest, int32_t destCapacity,
    //                 const UBool *caseFlags,
    //                 UErrorCode *pErrorCode);
    dcl-pr u_strToPunycode int(10) extproc(*CWIDEN : 'u_strToPunycode_4_0');
      source pointer value;
      sourceLength int(10) value;
      dest pointer value;
      destLength int(10) value;
      caseFlags pointer value;
      errorCode int(10);
    end-pr;

    dcl-s value ucs2(65534) ccsid(*utf16);
    dcl-s encoded ucs2(65534) ccsid(*utf16);
    dcl-s rc int(10);
    dcl-s errorCode int(10);
    dcl-s c ucs2(1) ccsid(*utf16) based(ptr);
  
    if (%len(p_value) = 0 or p_value = *blank);
      return p_value;
    endif;
  
    value = p_value + x'00';
  
    rc = u_strToPunycode(%addr(value) : -1 : %addr(encoded) : %size(encoded) : *null : errorCode);
    if (errorCode <> 0);
        iv_debug('Could not punycode encode value: ' + p_value);
        return p_value;
    endif;
    
    // See https://www.rfc-editor.org/rfc/rfc3492 , page 9 , 5. Parameter values for Punycode
    //
    // Using hyphen-minus as the delimiter implies that the encoded string can
    // end with a hyphen-minus only if the Unicode string consists entirely of 
    // basic code points, but IDNA forbids such strings from being encoded.
    if (%len(p_value)+1 = rc);
        return p_value;
    else;
        return %char(%subst(encoded : 1 : rc));
    endif;
end-proc;


dcl-proc iv_encode_ace export;
    dcl-pi *n varchar(32766);
        p_value varchar(32766) const;
    end-pi;
    
    dcl-s aceString varchar(32766);
    dcl-s encodedValue varchar(32766);
    dcl-s x int(10);
    dcl-s start int(10);
    dcl-s value varchar(32766);
    
    if (p_value = *blank);
        return *blank;
    endif;
    
    dou (x = 0);
        if (start >= %len(p_value));
            leave;
        endif;
        
        x = %scan('.' : p_value : start+1);
        
        if (x > 0);
            value = %subst(p_value : start+1 : x-start-1);
            encodedValue = iv_encode_punycode(value);
            if (%len(encodedValue) = %len(value));
                aceString += value;
            else;
                aceString += 'xn--' + encodedValue;
            endif;
        
            if (x <= %len(p_value));
                aceString += '.';
            endif;
        else;
            aceString += %subst(p_value : start+1);
        endif;
        
        start = x;
    enddo;
    
    return aceString;
end-proc;


dcl-proc iv_encode_mime export;
    dcl-pi *n varchar(524284) ccsid(*hex);
        data varchar(524284) ccsid(*hex) value;
        p_charset varchar(20) const options(*nopass : *omit);
        p_encoding char(1) value options(*nopass);
    end-pi;
    
    dcl-s charset varchar(20) ccsid(*utf8) inz(IV_ENCODE_MIME_UTF8);
    dcl-s encoding char(1) ccsid(*utf8) inz(IV_ENCODE_MIME_BASE64);
    dcl-s encoded varchar(524284) ccsid(*hex);
    
    if (%parms() >= 2 and %addr(p_charset) <> *null);
        charset = p_charset;
    endif;
    
    if (%parms() >= 3);
        encoding = p_encoding;
    endif;
    
    %len(encoded) = 524284;
    %len(encoded) = base64_encodeBuffer(%addr(encoded : *data) : %addr(data : *data) : %len(data));
    
    return '=?' + charset + '?' + encoding + '?' + encoded + '?=';
end-proc;


dcl-proc iv_encode_base64 export;
    dcl-pi *n varchar(524284:4) ccsid(*utf8) rtnparm;
        string varchar(524284:4) ccsid(*utf8) options(*varsize) const;
    end-pi;
    
    return base64_encode(string);
end-proc;


dcl-proc iv_encode_base64_buffer export;
    dcl-pi *n int(20);
        output pointer value;
        input pointer value;
        inputLength int(20) value;
    end-pi;
     
    return  base64_encodeBuffer(output : input : inputLength);
end-proc;
