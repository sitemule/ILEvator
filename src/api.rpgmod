**FREE

ctl-opt nomain thread(*concurrent);

/include 'api.rpginc'
/include 'anychar.rpginc'
/include 'base64.rpginc'
/include 'chunked.rpginc'
/include 'clib.rpginc'
/include 'crypto.rpginc'
/include 'debug.rpginc'
/include 'httpclient.rpginc'
/include 'message.rpginc'
/include 'simpleList.rpginc'
/include 'sockets.rpginc'
/include 'teraspace.rpginc'

dcl-s listedHttpStatusCodes int(5) dim(41) ctdata;

dcl-proc iv_newHttpClient export;
    dcl-pi *n pointer end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);

    pClient = teraspace_alloc(%size(ilevator_t));
    clear client;

    client.method = *NULL;
    client.url = *NULL;
    
    client.buffer = teraspace_alloc(IV_BUFFER_SIZE);
    client.bufferSize = IV_BUFFER_SIZE;

    client.sockets =  sockets_new();
    client.headerList = sList_new();
    client.responseHeaderList = *NULL;
    client.timeout = DEFAULT_TIMEOUT;
    client.retries = DEFAULT_RETRIES;
    client.blockingSockets = *ON;
    
    client.server = NULL;
    client.port = 0;
    client.resource = NULL;
    client.host = NULL;
    client.user = NULL;
    client.password = NULL;
    client.location = NULL;
    client.message = NULL;
    client.requestHeaderList = *NULL;
    
    iv_addHeader(pClient : 'User-Agent' : 'ILEvator for IBM i/' + ILEVATOR_VERSION);
    
    loadConfigFromEnvVar(pClient);
    
    return pClient;
end-proc;


dcl-proc iv_free export;
    dcl-pi *n;
      pClient pointer value;
    end-pi;
    
    dcl-ds client likeds(ilevator_t) based(pClient);
    
    if (pClient = *null);
      return;
    endif;
    
    iv_freeList(client.headerList);
    sList_freeLVPCs(client.responseHeaderList);
    
    teraspace_free(client.method);
    teraspace_free(client.url);
    teraspace_free(client.requestDataFile);
    sockets_free(client.sockets);
    sList_free(client.headerList);
    teraspace_free(client.authProvider);
    teraspace_free(client.buffer);
    iv_free (client.proxyTunnel);
    teraspace_free(pClient);
end-proc;


dcl-proc iv_freeList export;
  dcl-pi *n;
    list pointer;
  end-pi;
  
  dcl-ds iterator likeds(SLISTITERATOR_t) inz;
  dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
  dcl-ds payload likeds(SLISTKEYVAL_t) based(node.payloadData);
  
  iterator = sList_setIterator(list);
  
  dow (sList_foreach(iterator));
    teraspace_free(payload.key.string);
    teraspace_free(payload.value.string);
  enddo;
  
  sList_free(list);
end-proc;


dcl-proc iv_setResponseHeaderBuffer export;
    dcl-pi *n;
        pClient pointer value;
        buffer pointer value;
        bufferSize uns(10) value;
        bufferType int(5) value;
        bufferCcsid int(10) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);
    
    iv_anychar_set( 
        %addr( client.responseHeaderBuffer)  :
        buffer :
        bufferSize :
        bufferType :
        bufferCcsid
    );
end-proc;


dcl-proc iv_getResponseDataLength  export;
    dcl-pi *n uns(10);
        pClient pointer value;
    end-pi;
    
    dcl-ds client likeds(ilevator_t) based(pClient);
    
    return iv_anychar_get_length( 
        %addr(client.responseDataBuffer) 
    );
end-proc;

dcl-proc iv_setResponseDataBuffer export;
    dcl-pi *n;
        pClient pointer value;
        buffer pointer value;
        bufferSize uns(10) value;
        bufferType int(5) value;
        bufferCcsid int(10) value;        
    end-pi;
    
    dcl-ds client likeds(ilevator_t) based(pClient);
    
    iv_anychar_set( 
        %addr(client.responseDataBuffer) :
        buffer :
        bufferSize :
        bufferType :
        bufferCcsid
    );
end-proc;


dcl-proc iv_setRequestDataBuffer export;
    dcl-pi *n;
        pClient pointer value;
        buffer pointer value;
        bufferSize uns(10) value;
        bufferType int(5) value;
        bufferCcsid int(10) value;        
    end-pi;
    
    dcl-ds client  likeds(ilevator_t) based(pClient);
    dcl-s  pAnyChar pointer;
    dcl-ds anyChar likeds(anychar_t)  based(pAnyChar);

    dcl-s  twoBytesLength  int(5) based(buffer);
    dcl-s  fourBytesLength int(10) based(buffer);        

    pAnyChar =  %addr(client.requestDataBuffer);
    anyChar.ccsid = bufferCcsid;
    anyChar.type = bufferType;

    if     bufferType  = IV_BYTES;
        anyChar.data   = buffer; 
        anyChar.size   = bufferSize;
        anyChar.length = bufferSize;
    elseif bufferType  = IV_VARCHAR2;
        anyChar.data   = buffer + 2; 
        anyChar.size   = twoBytesLength + 2;
        anyChar.length = twoBytesLength;
    elseif bufferType  = IV_VARCHAR4;
        anyChar.data   = buffer + 4; 
        anyChar.size   = fourBytesLength + 4;
        anyChar.length = fourBytesLength;
    endif;


end-proc;

dcl-proc iv_setProxyTunnel  export;
    dcl-pi *n;
        pClient pointer value;
        url pointer options(*string) value;        
    end-pi;
    
    dcl-ds client likeds(ilevator_t) based(pClient);
    dcl-ds proxy  likeds(ilevator_t) based(client.proxyTunnel);
    client.proxyTunnel = iv_newHttpClient();
    proxy.url    = teraspace_strTrimDup(url);
    
end-proc;


dcl-proc iv_setResponseFile export;
    dcl-pi *n;
        pClient       pointer value;
        fileName      pointer options(*string) value;
        fileCcsid     int(10)  options(*nopass) value;        
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);
    dcl-s c_errno int(10) based(pErrno);
    dcl-s mode char(32);

    if (%parms() = 2);
        mode = 'wb,o_ccsid=1252';
    else;
        mode = 'wb,o_ccsid=' + %char(fileCcsid);
    endif;

	unlink(fileName);
	
	client.responseDataFile = fopen(fileName : mode);
	if (client.responseDataFile = *null);
	    pErrno = errno();
        message_info('Response output open failed: ' + %str(strerror(c_errno):1000));
	endif;
end-proc;

dcl-proc iv_setRequestFile export;
    dcl-pi *n;
        pClient       pointer value;
        fileName      pointer options(*string) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);
    client.requestDataFile = teraspace_strTrimDup(fileName);

end-proc; 

dcl-proc iv_setCommTrace export;
    dcl-pi *n;
        pClient         pointer value;
        traceFileName   pointer options(*string) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);

    sockets_setTrace(client.sockets : traceFileName);

end-proc;

dcl-proc iv_setBlockingSockets export;
    dcl-pi *n;
        pClient           pointer value;
        blockingSockets   ind value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);

    client.blockingSockets = blockingSockets;
end-proc;


dcl-proc iv_execute export;
    dcl-pi *n ind;
        client pointer value;
        method pointer options(*string:*trim) value;
        url pointer options(*string:*trim) value;
        headers pointer options(*nopass) value;
    end-pi;

    dcl-s success ind;
    
    if (iv_connect(client : url));
        if (%parms() >= 4);
            success = iv_http_request(client : method : url : headers);
        else;
            success = iv_http_request(client : method : url);
        endif;
    endif;
    
    iv_disconnect(client);

    return success;
end-proc;


dcl-proc iv_connect export;
    dcl-pi *n ind;
        pClient pointer value;
        url pointer options(*string:*trim) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);

    if (client.connected);
        iv_disconnect(pClient);
    endif;

    client.url = teraspace_strTrimDup(url);
   
    parseUrl(pClient : url);
   
    iv_debug('Port: %s' : %str(%addr(client.port):10) );
    iv_debug('Server: %s' : %str(%addr(client.server):200) );
    iv_debug('Host: %s' : %str(%addr(client.host):200) );

    if (client.proxyTunnel <> *NULL);
        return connect_using_proxy_tunnel(client);
    else;
        return connect_directly (client);
    endif;

end-proc;

dcl-proc connect_directly export;
    dcl-pi *n ind;
        client likeds(ilevator_t);
    end-pi;
    dcl-s  apiStatus int(10) inz(IV_STATUS_RETRY);
    dcl-s  ok like(ENUM);
    dcl-s  try int(5);

    for try = 0 to client.retries;

        ok = sockets_connect(
            client.sockets :
            client.server :
            client.port :
            client.timeout * 1000:  // from seconds to milliseconds
            client.blockingSockets
        );
        if (ok = TRUE);
            apiStatus = IV_STATUS_OK;
            client.connected = *on;
            leave;
        else;
            apiStatus = IV_STATUS_ERROR;
        endif;

    endfor;

    return (apiStatus = IV_STATUS_OK);

end-proc;


dcl-proc iv_disconnect export;
    dcl-pi *n;
        pClient pointer value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);
    
    sockets_close(client.sockets);
    client.connected = *off;
end-proc;


dcl-proc iv_http_request export;
    dcl-pi *n ind;
        pClient pointer value;
        method pointer options(*string:*trim) value;
        url pointer options(*string:*trim) value;
        headers pointer options(*nopass) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);
    dcl-ds proxy  likeds(ilevator_t) based(pProxy);
    dcl-s  apiStatus int(10) inz(IV_STATUS_RETRY);
    dcl-s  try int(5);
    dcl-s  ok like(ENUM);
    dcl-s  success ind; 
    dcl-s  pProxy pointer;

    pProxy = client.proxyTunnel;
    
    if (not client.connected);
        iv_debug('Not connected to server.');
        return *OFF;
    endif;
    
    if (%parms() >= 4);
        client.requestHeaderList = headers;
    endif;

    if (client.method <> *NULL);
        teraspace_free(client.method);
    endif;
    client.method = teraspace_strTrimDup(method);
    
    if (client.url <> *NULL);
        teraspace_free(client.url);
    endif;
    client.url = teraspace_strTrimDup(url);
    
    parseUrl(pClient : url); 
    
    iv_debug('Port: %s' : %str(%addr(client.port):10) );
    iv_debug('Server: %s' : %str(%addr(client.server):200) );
    iv_debug('Host: %s' : %str(%addr(client.host):200) );
    iv_debug('Resource: %s' : %str(%addr(client.resource):200) );

    // Are done in the _connect
    // if (client.proxyTunnel <> *NULL ) ;
    //     success = connect_using_proxy_tunnel (client);
    //     if not success;
    //         return *OFF;
    //     endif;
    // endif;
    
    for try = 0 to client.retries;
        apiStatus = sendRequest(pClient);
        if (apiStatus = IV_STATUS_ERROR);
            leave; 
        endif;

        apiStatus = receiveHeader(pClient);

        if (apiStatus = IV_STATUS_ERROR);
            leave; 
        endif;
        if (apiStatus = IV_STATUS_RETRY);
            iter; 
        endif;
        
        iv_debug('HTTP response status: %s' : %char(client.status));

        // Don't try to get data if it was a HEAD request - it is only the header
        // or status 204 => no content
        if (%str(client.method:10) = 'HEAD' or client.status = 204);
            // No content, don't read any longer
            apiStatus = IV_STATUS_OK;
        elseif (client.status = 101);
            apiStatus = IV_STATUS_OK;
        elseif (client.status = 405); // Invalid method - no data
            apiStatus = IV_STATUS_ERROR;
        elseif (client.responseIsChunked);
            apiStatus = iv_chunked_receive(pClient);
        else;
            apiStatus = receiveData(pClient);
        endif;

        if (apiStatus = IV_STATUS_OK);
            leave; 
        endif;
        if (apiStatus = IV_STATUS_ERROR);
            leave; 
        endif;
        if (apiStatus = IV_STATUS_RETRY);
            iter;
        endif;
        
    endfor;

    if (iv_getHeader(pClient : 'Connection') = 'close');
        iv_disconnect(pClient);
    endif;

    iv_anychar_finalize(%addr(client.responseHeaderBuffer));
    iv_anychar_finalize(%addr(client.responseDataBuffer));

    if (client.responseDataFile <> *null);
        fclose(client.responseDataFile);
    endif;

    return (apiStatus = IV_STATUS_OK);
end-proc;


dcl-proc connect_using_proxy_tunnel ;
    dcl-pi *n ind;
        client likeds(ilevator_t);
    end-pi;
    
    dcl-s  try int(5);
    dcl-s  ok like(ENUM);
    dcl-s  apiStatus int(10) inz(IV_STATUS_RETRY);
    dcl-s  pProxy pointer;
    dcl-ds proxy likeds(ilevator_t) based(pProxy);

    pProxy = client.proxyTunnel;
    proxy.method = teraspace_strTrimDup('CONNECT');

    for try = 0 to proxy.retries;
        parseUrl(pProxy : proxy.url); 

        iv_debug('Connecting to proxy : %s %s' : %char(proxy.host) : %char(proxy.port));

        ok = sockets_connect(
            proxy.sockets : 
            proxy.host : 
            proxy.port : 
            proxy.timeout * 1000: // from seconds to milliseconds
            proxy.blockingSockets
        );
        if (ok <> TRUE);
            apiStatus = IV_STATUS_ERROR;
            iter;
        endif;

        proxy.host = client.host;
        proxy.port = client.port; 
        
        apiStatus = sendRequest(pProxy);
        if (apiStatus = IV_STATUS_ERROR);
            leave; 
        endif;
        
        apiStatus = receiveHeader(pProxy);

        iv_debug('HTTP CONNECT proxy response status: %s' : %char(proxy.status));

        if (apiStatus = IV_STATUS_OK);
            // Inherit the proxy socket on the main client 
            sockets_copy_socket ( client.sockets : proxy.sockets : client.host);
            sockets_set_secure (client.sockets);
            client.connected = *ON;
            return *ON; // Success
        endif;

        if (apiStatus = IV_STATUS_ERROR);
            leave; 
        elseif (apiStatus = IV_STATUS_RETRY);
            iter; 
        endif;
    endfor;
    
    return *OFF; // This far => error 
end-proc;


dcl-proc iv_setCertificate export;
    dcl-pi *n ind;
        pClient pointer value;
        certificateFile pointer options(*string) value;
        certificatePassword pointer options(*string : *nopass) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);
    dcl-s c_errno int(10) based(pErrno);
    dcl-s empty_str char(1) inz(x'00');
    
    if (0 <> access(certificateFile : R_OK));
        pErrno = errno();
        message_info('Certificate error: ' +
            %str(strerror(c_errno) : 1000) + 
            ' File: ' + %str(certificateFile : 1000)
        );
        return *off;
    endif;
    
    if (%parms < 3);
        certificatePassword = %addr(empty_str);
    endif;

    sockets_setKeystore(
        client.sockets :
        SECURE_HANDSHAKE_IMEDIATE :
        certificateFile :
        certificatePassword
    );
    
    iv_debug('SSL enabled');
    iv_debug('Using certificate file ' + %str(certificateFile));
    
    return *on;
end-proc;


dcl-proc iv_getStatus export;
    dcl-pi *n int(5);
        pClient pointer value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient); 
    
    return client.status;
end-proc;

dcl-proc iv_getErrorMessage export;
    dcl-pi *n varchar(256);
        pClient pointer value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient); 
    
    return client.message;
end-proc;


dcl-proc iv_getHeader export;
    dcl-pi *n varchar(IV_HEADER_VALUE_SIZE:2) ccsid(*utf8);
        pClient pointer value;
        pHeaderName varchar(IV_HEADER_NAME_SIZE:2) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient); 
    dcl-ds iterator likeds(SLISTITERATOR_t) inz;
    dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
    dcl-ds mapEntry likeds(SLISTKEYVAL_t) based(node.payloadData);
    dcl-s size int(10);
    dcl-s headerName varchar(IV_HEADER_NAME_SIZE:2);
    dcl-s headerValue varchar(IV_HEADER_VALUE_SIZE:2) ccsid(*hex);
    dcl-s tempHeaderAscii varchar(IV_HEADER_VALUE_SIZE:2) ccsid(*utf8);
    dcl-s tempHeaderEbcdic varchar(IV_HEADER_VALUE_SIZE:2);
    dcl-s UPPER char(26) inz('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
    dcl-s LOWER char(26) inz('abcdefghijklmnopqrstuvwxyz');
    
    if client.responseHeaderList = *NULL;
        return '';
    endif;

    headerName = %xlate(UPPER : LOWER : pHeaderName);
    
    iterator = sList_setIterator(client.responseHeaderList);
   
    dow (sList_foreach(iterator));
        if (%len(headerName) = mapEntry.key.Length);
        
            %len(tempHeaderAscii) = mapEntry.key.Length;
            memcpy(%addr(tempHeaderAscii : *data) : mapEntry.key.String : mapEntry.key.Length);
            tempHeaderEbcdic = tempHeaderAscii;
            tempHeaderEbcdic = %xlate(UPPER : LOWER : tempHeaderEbcdic);
        
            if (headerName = tempHeaderEbcdic);
                size = mapEntry.value.Length;
                if (mapEntry.value.Length > IV_HEADER_VALUE_SIZE);
                    size = IV_HEADER_VALUE_SIZE;
                endif;
            
                %len(headerValue) = size;
                memcpy(%addr(headerValue : *data) : mapEntry.value.String : size);
                
                // don't leave, we need the LAST corresponding header
            endif;
        endif;
    enddo;
    
    return headerValue;
end-proc;


dcl-proc iv_setAuthProvider export;
    dcl-pi *n;
        pClient pointer value;
        authProvider pointer value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient); 
    
    if (client.authProvider <> *null);
        teraspace_free(client.authProvider);
    endif;
    
    client.authProvider = authProvider;
end-proc;


dcl-proc addHeader export;
    dcl-pi *n;
        list pointer value;
        headerName varchar(IV_HEADER_NAME_SIZE:2) ccsid(*utf8) value;
        headerValue varchar(IV_HEADER_VALUE_SIZE:2) ccsid(*utf8) value;
    end-pi;

    dcl-s lowerName varchar(IV_HEADER_NAME_SIZE:2) ccsid(*utf8);
    dcl-ds listKey likeds(LVARPUCHAR_t);
    dcl-ds listValue likeds(LVARPUCHAR_t);
    
    if (headerName = *blank);
      return;
    endif;
    
    // TODO use OS API for proper conversion
    lowerName = %xlate(UPPER : LOWER : headerName);
    
    listKey.length = %len(lowerName);
    listKey.string = teraspace_alloc(listKey.length + 1);
    %str(listKey.string : listKey.length + 1) = lowerName;
    
    listValue.length = %len(headerValue);
    listValue.string = teraspace_alloc(listValue.length + 1);
    %str(listValue.string : listValue.length + 1) = headerValue;
    
    sList_pushLVPC(list : listKey : listValue);
end-proc;


dcl-proc iv_addHeader export;
    dcl-pi *n;
        pClient pointer value;
        headerName varchar(IV_HEADER_NAME_SIZE:2) ccsid(*utf8) value;
        headerValue varchar(IV_HEADER_VALUE_SIZE:2) ccsid(*utf8) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient);
    dcl-s lowerName varchar(IV_HEADER_NAME_SIZE:2) ccsid(*utf8);
    dcl-ds listKey likeds(LVARPUCHAR_t);
    dcl-ds listValue likeds(LVARPUCHAR_t);
    
    if (headerName = *blank);
      return;
    endif;
    
    addHeader(client.headerList : headerName : headerValue);
end-proc;


dcl-proc iv_addHeaders export;
    dcl-pi *n;
        pClient pointer value;
        headers pointer value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient); 
    dcl-ds iterator likeds(SLISTITERATOR_t);
    dcl-ds node likeds(SLISTNODE_t) based(iterator.pThis);
    dcl-ds nodePayload likeds(SLISTKEYVAL_t) based(node.payloadData);
    dcl-s headerName varchar(IV_HEADER_NAME_SIZE) ccsid(*utf8);
    dcl-s headerValue varchar(IV_HEADER_VALUE_SIZE) ccsid(*utf8);
  
    iterator = sList_setIterator(headers);
    dow (sList_foreach(iterator));
        headerName = %str(nodePayload.key.string : nodePayload.key.length);
        headerValue = %str(nodePayload.value.string : nodePayload.value.length);
        addHeader(client.headerList : headerName : headerValue);
    enddo;
end-proc;


dcl-proc iv_get export;
    dcl-pi *n varchar(IV_BUFFER_SIZE:4) ccsid(1208) rtnparm;
        url varchar(IV_URL_SIZE:2) value;
        acceptMimeType varchar(IV_HEADER_VALUE_SIZE:2) ccsid(1208) value options(*nopass);
        headers pointer value options(*nopass);        
    end-pi;

    dcl-s client pointer;
    dcl-s returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
    dcl-s rc ind inz(*off);
    
    client = iv_newHttpClient();
    
    iv_setResponseDataBuffer(
        client :
        %addr(returnBuffer) : 
        IV_BUFFER_SIZE :
        IV_VARCHAR4 :
        IV_CCSID_UTF8
    );
    
    if (%parms() >= 3);
        iv_addHeader(client : 'Accept' : acceptMimeType);
    endif;
    
    if (%parms() >= 4);
        iv_addHeaders(client : headers);
    endif;
    
    rc = iv_execute(client : 'GET' : url);
    
    if (not isSuccessfulRequest(client));
        sendStatusCodeEscapeMessage(client : returnBuffer);
    endif;
    
    return returnBuffer;
        
on-exit;
    iv_free(client);
end-proc;


dcl-proc sendStatusCodeEscapeMessage export;
    dcl-pi *n;
        client pointer value;
        returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
    end-pi;

    sendStatusCodeMessage(client : returnBuffer : '*ESCAPE');
end-proc;


dcl-proc sendStatusCodeInfoMessage export;
    dcl-pi *n;
        client pointer value;
        returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
    end-pi;

    sendStatusCodeMessage(client : returnBuffer : '*INFO');
end-proc;


dcl-proc sendStatusCodeMessage export;
    dcl-pi *n;
        client pointer value;
        returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
        messageType char(10) value;
    end-pi;

    dcl-s status int(5);
    dcl-s messageFile char(20) inz('ILEVATOR  *LIBL');
    dcl-s messageId char(7);
    dcl-s messageBody varchar(1000);
    
    status = iv_getStatus(client);
    
    if (%lookup(status : listedHttpStatusCodes) > 0);
        messageId = 'ILV0' + %char(status);

        monitor;
            messageBody = returnBuffer;
        on-error;
            messageBody = 'The message body contains not convertible characters.';
        endmon;
    else;
        messageId = 'ILV0999';
        messageBody = 'Unsupported HTTP status code ' + %char(status);
    endif;
    
    message_sendPastControlBoundary(messageId : messageFile : messageType : messageBody);
end-proc;


dcl-proc isSuccessfulRequest export;
    dcl-pi *n ind;
        client pointer value;
    end-pi;

    dcl-s status int(5);
    
    status = iv_getStatus(client);
    
    return status < 400;
end-proc;


dcl-proc sendAndReceiveData export;
    dcl-pi *n varchar(IV_BUFFER_SIZE:4) ccsid(1208) rtnparm;
        method pointer options(*string) value;
        url varchar(IV_URL_SIZE:2) value;
        messageBody varchar(IV_BUFFER_SIZE:4) value ccsid(1208);
        contentType varchar(IV_HEADER_VALUE_SIZE:2) ccsid(1208) value options(*nopass);
        headers pointer value options(*nopass);
    end-pi;
    
    dcl-s client pointer;
    dcl-ds clientDs likeds(ilevator_t) based(client);
    dcl-s returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
    dcl-s rc ind inz(*off);
    dcl-s messageBodyLength uns(10);
    
    client = iv_newHttpClient();
    
    iv_setResponseDataBuffer(
        client :
        %addr(returnBuffer) : 
        IV_BUFFER_SIZE :
        IV_VARCHAR4 :
        IV_CCSID_UTF8
    );
    
    messageBodyLength = %len(messageBody);
    if (messageBodyLength > 0);
        iv_setRequestDataBuffer(
            client :
            %addr(messageBody) : 
            messageBodyLength :
            IV_VARCHAR4 :
            IV_CCSID_UTF8
        );
        clientDs.requestDataBuffer.length = messageBodyLength;
    endif;
    
    if (%parms() >= 5);
        iv_addHeader(client : 'Content-Type' : contentType);
    endif;
    
    if (%parms() >= 6);
        iv_addHeaders(client : headers);
    endif;
    
    rc = iv_execute(client : method : url);
    
    if (not isSuccessfulRequest(client));
        sendStatusCodeEscapeMessage(client : returnBuffer);
    endif;
    
    return returnBuffer;
    
    on-exit;
        iv_free(client);
end-proc;


dcl-proc iv_patch export;
    dcl-pi *n varchar(IV_BUFFER_SIZE:4) ccsid(1208) rtnparm;
        url varchar(IV_URL_SIZE:2) value;
        messageBody varchar(IV_BUFFER_SIZE:4) const ccsid(1208);
        contentType varchar(IV_HEADER_VALUE_SIZE:2) ccsid(1208) value options(*nopass);
        headers pointer value options(*nopass);
    end-pi;
    
    if (%parms() = 3);
        return sendAndReceiveData('PATCH' : url : messageBody);
    elseif (%parms() = 4);
        return sendAndReceiveData('PATCH' : url : messageBody : contentType);
    elseif (%parms() = 5);
        return sendAndReceiveData('PATCH' : url : messageBody : contentType : headers);
    endif;
end-proc;


dcl-proc iv_post export;
    dcl-pi *n varchar(IV_BUFFER_SIZE:4) ccsid(1208) rtnparm;
        url varchar(IV_URL_SIZE:2) value;
        messageBody varchar(IV_BUFFER_SIZE:4) const ccsid(1208);
        contentType varchar(IV_HEADER_VALUE_SIZE:2) ccsid(1208) value options(*nopass);
        headers pointer value options(*nopass);
    end-pi;
    
    if (%parms() = 3);
        return sendAndReceiveData('POST' : url : messageBody);
    elseif (%parms() = 4);
        return sendAndReceiveData('POST' : url : messageBody : contentType);
    elseif (%parms() = 5);
        return sendAndReceiveData('POST' : url : messageBody : contentType : headers);
    endif;
end-proc;


dcl-proc iv_postForm export;
    dcl-pi *n varchar(IV_BUFFER_SIZE:4) ccsid(1208) rtnparm;
        url varchar(IV_URL_SIZE:2) value;
        formData likeds(iv_lvarpuchar_t);
        headers pointer value options(*nopass);
    end-pi;
    
    dcl-s client pointer;
    dcl-ds clientDs likeds(ilevator_t) based(client);
    dcl-s returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
    dcl-s rc ind inz(*off);
    
    client = iv_newHttpClient();
    
    iv_setResponseDataBuffer(
        client :
        %addr(returnBuffer) : 
        IV_BUFFER_SIZE :
        IV_VARCHAR4 :
        IV_CCSID_UTF8
    );
    
    if (formData.length > 0);
        iv_setRequestDataBuffer(
            client :
            formData.string : 
            formData.length :
            IV_BYTES :
            0
        );
        clientDs.requestDataBuffer.length = formData.length;
    endif;
    
    iv_addHeader(client : 'Content-Type' : 'application/x-www-form-urlencoded');
    
    if (%parms() >= 4);
        iv_addHeaders(client : headers);
    endif;
    
    rc = iv_execute(client : 'POST' : url);
    
    if (not isSuccessfulRequest(client));
        sendStatusCodeEscapeMessage(client : returnBuffer);
    endif;
    
    return returnBuffer;
    
    on-exit;
        iv_free(client);
end-proc;


dcl-proc iv_put export;
    dcl-pi *n varchar(IV_BUFFER_SIZE:4) ccsid(1208) rtnparm;
        url varchar(IV_URL_SIZE:2) value;
        messageBody varchar(IV_BUFFER_SIZE:4) const ccsid(1208);
        contentType varchar(IV_HEADER_VALUE_SIZE:2) ccsid(1208) value options(*nopass);
        headers pointer value options(*nopass);
    end-pi;
    
    if (%parms() = 3);
        return sendAndReceiveData('PUT' : url : messageBody);
    elseif (%parms() = 4);
        return sendAndReceiveData('PUT' : url : messageBody : contentType);
    elseif (%parms() = 5);
        return sendAndReceiveData('PUT' : url : messageBody : contentType : headers);
    endif;
end-proc;


dcl-proc iv_setTimeout export;
    dcl-pi *n;
        pClient pointer value;
        timeout packed(9:3) value;
    end-pi;
    
    dcl-ds client likeds(ilevator_t) based(pClient); 
    
    client.timeout = timeout;
end-proc;


dcl-proc iv_setRetries export;
    dcl-pi *n;
        pClient pointer value;
        retries int(5) value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(pClient); 

    client.retries = retries;
end-proc;


dcl-proc iv_delete export;
    dcl-pi *n varchar(IV_BUFFER_SIZE:4) ccsid(1208) rtnparm;
        url varchar(IV_URL_SIZE:2) value;
        headers pointer value options(*nopass);        
    end-pi;

    dcl-s client pointer;
    dcl-s returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
    dcl-s rc ind inz(*off);
    
    client = iv_newHttpClient();
    
    iv_setResponseDataBuffer(
        client :
        %addr(returnBuffer) : 
        IV_BUFFER_SIZE :
        IV_VARCHAR4 :
        IV_CCSID_UTF8
    );
    
    if (%parms() >= 3);
        iv_addHeaders(client : headers);
    endif;
    
    rc = iv_execute(client : 'DELETE' : url);
    
    if (not isSuccessfulRequest(client));
        sendStatusCodeEscapeMessage(client : returnBuffer);
    endif;
    
    return returnBuffer;
        
on-exit;
    iv_free(client);
end-proc;


dcl-proc iv_head export;
    dcl-pi *n ind;
        url varchar(IV_URL_SIZE:2) value;
        headers pointer value options(*nopass);        
    end-pi;

    dcl-s client pointer;
    dcl-s returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
    dcl-s rc ind inz(*off);
    
    client = iv_newHttpClient();
    
    iv_setResponseDataBuffer(
        client :
        %addr(returnBuffer) : 
        IV_BUFFER_SIZE :
        IV_VARCHAR4 :
        IV_CCSID_UTF8
    );
    
    if (%parms() >= 2);
        iv_addHeaders(client : headers);
    endif;
    
    rc = iv_execute(client : 'HEAD' : url);
    
    if (not isSuccessfulRequest(client));
        sendStatusCodeInfoMessage(client : returnBuffer);
    endif;
    
    return rc and isSuccessfulRequest(client);
on-exit;
    iv_free(client);
end-proc;


dcl-proc iv_options export;
    dcl-pi *n varchar(IV_BUFFER_SIZE:4) ccsid(1208) rtnparm;
        url varchar(IV_URL_SIZE:2) value;
        acceptMimeType varchar(IV_HEADER_VALUE_SIZE:2) ccsid(1208) value options(*nopass);
        headers pointer value options(*nopass);        
    end-pi;

    dcl-s client pointer;
    dcl-s returnBuffer varchar(IV_BUFFER_SIZE:4) ccsid(1208);
    dcl-s rc ind inz(*off);
    
    client = iv_newHttpClient();
    
    iv_setResponseDataBuffer(
        client :
        %addr(returnBuffer) : 
        IV_BUFFER_SIZE :
        IV_VARCHAR4 :
        IV_CCSID_UTF8
    );
    
    if (%parms() >= 3);
        iv_addHeader(client : 'Accept' : acceptMimeType);
    endif;
    
    if (%parms() >= 4);
        iv_addHeaders(client : headers);
    endif;
    
    rc = iv_execute(client : 'OPTIONS' : url);
    
    if (not isSuccessfulRequest(client));
        sendStatusCodeEscapeMessage(client : returnBuffer);
    endif;
    
    return returnBuffer;
        
on-exit;
    iv_free(client);
end-proc;


dcl-proc iv_buildList export;
    dcl-pi *n pointer;
        key1 varchar(IV_HEADER_NAME_SIZE) ccsid(*utf8) const options(*nopass);
        value1 varchar(IV_HEADER_VALUE_SIZE) ccsid(*utf8) const options(*nopass);
        key2 varchar(IV_HEADER_NAME_SIZE) ccsid(*utf8) const options(*nopass);
        value2 varchar(IV_HEADER_VALUE_SIZE) ccsid(*utf8) const options(*nopass);
        key3 varchar(IV_HEADER_NAME_SIZE) ccsid(*utf8) const options(*nopass);
        value3 varchar(IV_HEADER_VALUE_SIZE) ccsid(*utf8) const options(*nopass);
        key4 varchar(IV_HEADER_NAME_SIZE) ccsid(*utf8) const options(*nopass);
        value4 varchar(IV_HEADER_VALUE_SIZE) ccsid(*utf8) const options(*nopass);
        key5 varchar(IV_HEADER_NAME_SIZE) ccsid(*utf8) const options(*nopass);
        value5 varchar(IV_HEADER_VALUE_SIZE) ccsid(*utf8) const options(*nopass);
    end-pi;
    
    dcl-s list pointer;
    
    list = sList_new();
    
    if (%parms() >= 2);
       addHeader(list : key1 : value1);
    endif;
    if (%parms() >= 4);
       addHeader(list : key2 : value2);
    endif;
    if (%parms() >= 6);
       addHeader(list : key3 : value3);
    endif;
    if (%parms() >= 8);
       addHeader(list : key4 : value4);
    endif;
    if (%parms() >= 10);
       addHeader(list : key5 : value5);
    endif;
    
    return list;
end-proc;


dcl-proc iv_addHeaderToList export;
    dcl-pi *n;
        list pointer value;
        headerKey varchar(IV_HEADER_NAME_SIZE) ccsid(*utf8) const;
        headerValue varchar(IV_HEADER_VALUE_SIZE) ccsid(*utf8) const;        
    end-pi;

    addHeader(list : headerKey : headerValue);
end-proc;


dcl-proc iv_addEntryToList export;
    dcl-pi *n;
        list pointer value;
        key pointer value options(*string);
        value pointer value options(*string);
    end-pi;

    dcl-ds listKey likeds(LVARPUCHAR_t);
    dcl-ds listValue likeds(LVARPUCHAR_t);
    
    if (strlen(key) = 0);
      return;
    endif;
    
    listKey.length = strlen(key);
    listKey.string = teraspace_alloc(listKey.length + 1);
    memcpy(listKey.string : key : listKey.length + 1);
    
    listValue.length = strlen(value);
    listValue.string = teraspace_alloc(listValue.length + 1);
    memcpy(listValue.string : value : listValue.length + 1);
    
    sList_pushLVPC(list : listKey : listValue);
end-proc;


dcl-proc loadConfigFromEnvVar;
    dcl-pi *n;
        client pointer value;
    end-pi;

    dcl-s certValue pointer;
    dcl-s passValue pointer;
    dcl-s traceFileName pointer;
    
    certValue = getenv('ILEVATOR_CERTIFICATE');
    passValue = getenv('ILEVATOR_CERTIFICATE_PASSWORD');
    
    if (certValue <> *null and passValue <> *null);
        iv_setCertificate(client : certValue : passValue);
    elseif (certValue <> *null);
        iv_setCertificate(client : certValue);
    endif;
    
    traceFileName = getenv('ILEVATOR_TRACE_STMF');
    if (traceFileName <> *null); 
        iv_setCommTrace(client : traceFileName);
    endif;  
end-proc;


dcl-proc iv_setRequestHandler export;
    dcl-pi *n;
        p_client pointer value;
        handler pointer value;
    end-pi;

    dcl-ds client likeds(ilevator_t) based(p_client); 
    
    client.requestHandler = handler;
end-proc;

dcl-proc iv_configureSslVersion export;
    dcl-pi *n;
        p_client pointer value;
        sslVersion int(10) value;
        status ind value;
    end-pi;
    
    dcl-ds client likeds(ilevator_t) based(p_client); 
    dcl-s sslStatus int(10) inz(GSK_PROTOCOL_SSLV3_OFF);

    if (status);
        sslStatus = GSK_PROTOCOL_SSLV3_ON;
    endif;
    
    sockets_setSsl(client.sockets : sslVersion : sslStatus);
end-proc;

dcl-proc iv_configureTlsVersion export;
    dcl-pi *n;
        p_client pointer value;
        tlsVersion int(10) value;
        status ind value;
    end-pi;
    
    dcl-ds client likeds(ilevator_t) based(p_client); 
    dcl-s tlsStatus int(10) inz(GSK_FALSE);

    if (tlsVersion = GSK_PROTOCOL_TLSV1);
        if (status);
            tlsStatus = GSK_PROTOCOL_TLSV1_ON;
        else;
            tlsStatus = GSK_PROTOCOL_TLSV1_OFF;
        endif;
    elseif (status);
        tlsStatus = GSK_TRUE;
    endif;
    
    sockets_setTls(client.sockets : tlsVersion : tlsStatus);
end-proc;


dcl-proc iv_teraspace_use export;
    dcl-pi *n uns(20) end-pi;

    return teraspace_use();
end-proc;


dcl-proc iv_teraspace_leak export;
    dcl-pi *n int(3) end-pi;

    return teraspace_leak();
end-proc;


**CTDATA listedHttpStatusCodes
  400
  401
  402
  403
  404
  405
  406
  407
  408
  409
  410
  411
  412
  413
  414
  415
  416
  417
  418
  421
  422
  423
  424
  425
  426
  428
  429
  431
  451
  500
  501
  502
  503
  504
  505
  506
  507
  508
  510
  511
  999