**FREE

/if not defined (ILEVATOR_REQUEST_BUILDER)

/define ILEVATOR_REQUEST_BUILDER


/include 'url.rpginc'
/include 'varchar.rpginc'


///
// Maximum request URL size
///
dcl-c IV_REQUEST_URL_SIZE 32766;
///
// Maximum request HTTP header name/key size.
///
dcl-c IV_REQUEST_HEADER_NAME_SIZE 1024;
///
// Maximum request HTTP header value size.
///
dcl-c IV_REQUEST_HEADER_VALUE_SIZE 16384;

///
// Create new HTTP request
//
// Creates a new URL request with the given HTTP method, URL and optional
// the given Accept MIME type.
//
// @param HTTP method
// @param URL
// @param Accept HTTP header MIME type
//
// @return Request
// 
// @info The caller needs to free the allocated memory of the request by
//       calling <code>iv_request_dispose</code>.
///
dcl-pr iv_request_new_packedUrl pointer extproc(*dclcase);
  method varchar(12) value;
  url varchar(IV_REQUEST_URL_SIZE:2) ccsid(*utf8) value;
  mimeType varchar(IV_REQUEST_HEADER_VALUE_SIZE:2) ccsid(*utf8) value options(*nopass);
end-pr;

///
// Create new HTTP request
//
// Creates a new URL request with the given HTTP method, URL and optional
// the given Accept MIME type.
// <br/><br/>
// The url has been unpacked to its parts and are passed as separate parameters.
//
// @param HTTP method
// @param Host name
// @param Port
// @param Path
// @param Query
// @param Accept HTTP header MIME type
//
// @return Request
// 
// @info The caller needs to free the allocated memory of the request by
//       calling <code>iv_request_dispose</code>.
///
dcl-pr iv_request_new_unpackedUrl pointer extproc(*dclcase);
  method varchar(12) value;
  host pointer value options(*string);
  port int(10) value;
  path pointer value options(*string);
  query pointer value options(*string);
  mimeType varchar(IV_REQUEST_HEADER_VALUE_SIZE:2) ccsid(*utf8) value options(*nopass);
end-pr;

///
// Dispose HTTP request
//
// Frees the memory used by this HTTP request.
//
// @param HTTP request
///
dcl-pr iv_request_dispose extproc(*dclcase);
  request pointer;
end-pr;

///
// Add HTTP request header
//
// Adds the passed HTTP header in the request. The header will be appended to the list
// of headers. Any previously added header with the same name will still be included
// in the HTTP message.
//
// In HTTP the last header in the list (with the same name) wins.
//
// @param HTTP request
// @param HTTP header name
// @param HTTP header value
//
// @info The HTTP header name needs to be in ASCII.
// @info The HTTP header will always be converted to lowercase.
// @info The HTTP header value will be percent-encoded.
///
dcl-pr iv_request_addHeader extproc(*dclcase);
  request pointer value;
  name varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8) const;
  value varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8) const;
end-pr;


///
// Add HTTP request headers
//
// Adds a set of headers to the request. The header will be appended to the list
// of headers. Any previously added header with the same name will still be 
// included in the HTTP message.
//
// In HTTP the last header in the list (with the same name) wins.
//
// @param HTTP request
// @param List of HTTP headers (simpleList with key/value entries)
//
// @info The HTTP header will always be converted to lowercase.
///
dcl-pr iv_request_addHeaders extproc(*dclcase);
    request pointer value;
    headers pointer value;
end-pr;


///
// Get HTTP request header
//
// Returns the first request header value with the corresponding passed header 
// name. 
//
// @param HTTP request
// @param HTTP header name
// @return HTTP header value or <code>*blank</code> 
///
dcl-pr iv_request_getHeader varchar(8000) ccsid(*utf8) extproc(*dclcase);
  request pointer value;
  name varchar(IV_REQUEST_HEADER_NAME_SIZE) ccsid(*utf8) const;
end-pr;


///
// Set HTTP request Accept MIME type
//
// Sets the content type HTTP header for the passed request. Any previously set
// content type will be overwritten.
//
// @param HTTP request
// @param MIME type
///
dcl-pr iv_request_setAcceptMimeType extproc(*dclcase);
  request pointer value;
  mimeType varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8) const;
end-pr;

///
// Set HTTP request content type
//
// Sets the content type HTTP header for the passed request. Any previously set
// content type will be overwritten.
//
// @param HTTP request
// @param Content type
///
dcl-pr iv_request_setContentType extproc(*dclcase);
  request pointer value;
  contentType varchar(IV_REQUEST_HEADER_VALUE_SIZE) ccsid(*utf8) const;
end-pr;

///
// Set Form Data
//
// Adds all graph entries at the root level to the request body form urlencoded
// and sets application/x-form-www-urlencoded as content-type.
//
// @param Request
// @param Form data (noxDB2)
///
dcl-pr iv_request_setFormBody extproc(*dclcase);
  request pointer value;
  formData likeds(lvarpuchar_t) value;
end-pr;

///
// Set the HTTP request body (text)
//
// Sets the passed string data as the message body. The data will be converted
// into the corresponding CCSID. The CCSID of the request body is specified
// with the <em>charset</em> attribute of the Content-Type HTTP header.
//
// <br><br>
// <code>text/plain;charset=cp1252</code>
// <br><br>
//
// Some content types have an implicit CCSID, f. e. application/json is always
// UTF-8 encoded.
//
// <br><br>
//
// If any data should be sent as is (without CCSID conversion) the procedure
// <tt>iv_request_setBinaryBody</tt> can be used to set the data.
//
// @param HTTP request
// @param Message body
// @param CCSID of the message body value (default: 1208)
///
dcl-pr iv_request_setTextBody extproc(*dclcase);
  request pointer value;
  content varchar(1048576) ccsid(1208) value;
  ccsid uns(10) value options(*nopass);
end-pr;

///
// Set the HTTP request body (bytes as text)
//
// Sets the passed data as the message body. The data will <em>not</em> be 
// converted to any different CCSID but copied as is. The CCSID of the request 
// body is specified with the <em>charset</em> attribute of the Content-Type HTTP 
// header.
//
// <br><br>
// <code>text/plain;charset=cp1252</code>
// <br><br>
//
// Some content types have an implicit CCSID, f. e. application/json is always
// UTF-8 encoded.
//
// <br><br>
//
// If any data should be sent as is (without CCSID conversion) the procedure
// <tt>iv_request_setBinaryBody</tt> can be used to set the data.
//
// @param HTTP request
// @param Message body content
// @param Length of message body content
// @param CCSID of the message body value set on the Content-Type HTTP header (default: 1208)
///
dcl-pr iv_request_setTextBodyBytes extproc(*dclcase);
  request pointer value;
  content pointer value;
  size uns(10) value;
  ccsid uns(10) value options(*nopass);
end-pr;

///
// Set the HTTP request body (bytes)
//
// Sets the passed data as the message body. The data will copied as is. 
// The default Content-Type of the request will be <code>application/octet-stream</code>.
//
// @param HTTP request
// @param Message body content
// @param Length of message body content
///
dcl-pr iv_request_setBinaryBody extproc(*dclcase);
  request pointer value;
  content pointer value;
  size uns(10) value;
end-pr;

///
// Serialize HTTP request to string
//
// Returns the HTTP message in the HTTP message format of the HTTP protocol 
// version 1.1.
//
// @param HTTP request
// @return Formatted HTTP request
///
dcl-pr iv_request_toString likeds(lvarpuchar_t) extproc(*dclcase);
  request pointer value;
end-pr;

///
// Serialize HTTP request to stream
//
// Passes the HTTP message in the HTTP message format of the HTTP protocol 
// version 1.1 to the passed stream.
//
// @param HTTP request
// @param Output stream (see stream module)
// @return Formatted HTTP request
//
// @info The stream fill be flushed after passing the request content to the stream.
///
dcl-pr iv_request_toStream extproc(*dclcase);
  request pointer value;
  outstream pointer value;
end-pr;

///
// Check for text body
//
// Returns if the request has a text message body. A text body can be added by one of the following procedures:
//
// <ul>
//    <li>iv_request_setFormBody</li>
//    <li>iv_request_setTextBody</li>
//    <li>iv_request_setTextBodyBytes</li>
// </ul>
//
// @param HTTP request
// @return <code>*on</code> if the request has a text body else <code>*off</code>
///
dcl-pr iv_request_hasTextBody ind extproc(*dclcase);
  request pointer value;
end-pr;

///
// Check for message body
//
// Returns if the request has any message body (either binary or text).
//
// @param HTTP request
// @return <code>*on</code> if the request has any message body else <code>*off</code>
///
dcl-pr iv_request_hasBody ind extproc(*dclcase);
  request pointer value;
end-pr;

/if defined (RPG_HAS_OVERLOAD)
///
// Set the HTTP request body
//
// Sets the passed data as the message body.
///
dcl-pr iv_request_setBody overload(
  iv_request_setFormBody :
  iv_request_setTextBody :
  iv_request_setTextBodyBytes :
  iv_request_setBinaryBody
);

///
// Create new HTTP request
//
// Creates a new URL request with the given HTTP method, URL and optional
// the given Accept MIME type.
//
// @return Request
// 
// @info The caller needs to free the allocated memory of the request by
//       calling <code>iv_request_dispose</code>.
///
dcl-pr iv_request_new pointer overload(
    iv_request_new_packedUrl :
    iv_request_new_unpackedUrl
);
/endif

///
// Set the HTTP request body (file content)
//
// Sets the stream file as the message body content. The content of the file will be 
// copied to the message body as is.
//
// @param HTTP request
// @param Stream file path
///
dcl-pr iv_request_setFile extproc(*dclcase);
    request pointer value;
    file varchar(1024) const;
end-pr;

///
// Check if request needs streaming
// 
// Checks if the request can provide to the content in a single 1Mb variable with
// <code>iv_request_toString</code> or if it has to use the <code>stream</code>
// module to return a formatted version of the request.
// 
// @param HTTP request
// @return <code>*on</code> = request is too big to be returned with <code>iv_request_toString</code>
//         else <code>*off</code>
//
// @info If the request size is unknown (f. e. multipart request) it will always be streamed.
///
dcl-pr iv_request_needsStreaming ind extproc(*dclcase);
    request pointer value;
end-pr;

/endif
