**FREE

/if not defined (ILEVATOR_MULTIPART)
/define ILEVATOR_MULTIPART

///
// ILEvator : Multipart Form Data
//
// This module adds support for sending data as multipart form data to the server.
// A request handler is created with <code>iv_multipart_new</code>. Parts are added
// to the form of the handler with <code>iv_multipart_addPart</code>. Each part 
// can have additional headers.
//
// The request handler is registered at the client by calling 
// <code>iv_setRequestHandler</code>.
//
// The data is sent to the server with the Content-Type HTTP header 
// <code>multipart/form-data</code>.
// 
// @project ILEvator
// @author Mihael Schmidt
// 
///


///
// Default Media Type for multipart form data
///
dcl-c IV_MULTIPART_MEDIA_TYPE 'multipart/form-data';

///
// Binary part encoding : The content will be added to the part as is.
///
dcl-c IV_MULTIPART_ENCODING_BINARY 1;
///
// Text part encoding : The content will be added as text encoded in the specified CCSID 
// (see Content-Type HTTP header, attribute charset). This corresponds to the Content-Transfer-Encoding
// 8bit.
///
dcl-c IV_MULTIPART_ENCODING_TEXT 2;
///
// Base64 part encoding : The content will be encoded as in the specified CCSID (see Content-Type
// HTTP header, attribute charset) and then Base64 encoded. For better compatibility the lines
// will be split to a length of 80 characters.
///
dcl-c IV_MULTIPART_ENCODING_BASE64 3;


///
// Create a new multipart handler
//
// Returns a new multipart handler.
//
// @param MIME type (default: <code>multipart/form-data</code>)
// @param Boundary Id
// @return New multipart handler
//
// @info The procedure <code>iv_multipart_free</code> must be called for releasing
//       the allocated resources of this multipart handler.
///
dcl-pr iv_multipart_new pointer extproc(*dclcase);
    mimeType varchar(1000) const options(*nopass);
    boundary varchar(70) value ccsid(437) options(*nopass);
end-pr;
 
///
// Free memory of multipart handler
//
// Frees all memory associated with this multipart handler. If a boundary id is not provided it
// will be generated.
//
// @param Multipart handler
// @param Boundary id (default: generated)
///
dcl-pr iv_multipart_free extproc(*dclcase);
    handler pointer;
    boundaryId pointer const options(*string : *nopass);
end-pr;

///
// Finalize multipart message
//
// Finalizes this multipart message. No further parts are accepted to this multipart message.
//
// @param Multipart handler
///
dcl-pr iv_multipart_finalize extproc(*dclcase);
    handler pointer;
end-pr;

///
// Add new multipart from string
//
// Adds a new part to this multipart message. The content will be the string with the passed 
// headers. If no headers are passed the Content-Type <code>text/plain</code> will be used with
// the charset UTF-8. If any other encoding should be used it needs to be passed with the HTTP
// header Content-Type like <code>text/plain;charset=windows-1252</code>.
// <br><br>
// The field name will be addded as the name attribute to the Content-Disposition header
// of this part.
// <br><br>
// Valid content transfer encodings are IV_MULTIPART_ENCODING_TEXT and IV_MULTIPART_ENCODING_BASE64.
//
// @param Multipart handler
// @param Field name
// @param New part content
// @param Content transfer encoding (default: IV_MULTIPART_ENCODING_TEXT)
// @param Part headers
///
dcl-pr iv_multipart_addPartFromString extproc(*dclcase);
    handler pointer value;
    fieldName varchar(100) ccsid(1208) value;
    content varchar(1048576) ccsid(1208) value;
    encoding uns(3) value options(*nopass);
    headers pointer value options(*nopass);
end-pr;

///
// Add new multipart from file
//
// Adds a new part to this multipart message. The content of the passed file will added as is as the
// content of the new part. If no headers are passed the Content-Type <code>application/octet-stream</code> 
// will be used.
// 
// @param Multipart handler
// @param Field name
// @param File path
// @param Content transfer encoding (default: IV_MULTIPART_ENCODING_BASE64)
// @param Part headers
///
dcl-pr iv_multipart_addPartFromFile extproc(*dclcase);
    handler pointer value;
    fieldName varchar(100) ccsid(1208) value;
    path pointer value options(*string);
    encoding uns(3) value options(*nopass);
    headers pointer value options(*nopass);
end-pr;

///
// Add new multipart from raw byte
//
// Adds a new part to this multipart message. The passed bytes will be added as the content of the 
// new part. If no headers are passed the Content-Type <code>application/octet-stream</code> will 
// be used.
// 
// @param Multipart handler
// @param Field name
// @param Part content
// @param Part content length
// @param Content transfer encoding (default: IV_MULTIPART_ENCODING_BINARY)
// @param Part headers
///
dcl-pr iv_multipart_addPartFromBytes extproc(*dclcase);
    handler pointer value;
    fieldName varchar(100) ccsid(1208) value;
    content pointer value;
    length uns(10) value;
    encoding uns(3) value options(*nopass);
    headers pointer value options(*nopass);
end-pr;

///
// Write content to stream
//
// Writes the content of the multipart message to the passed stream. The HTTP request
// header with the boundary id will not be written to the stream. The procedure will
// return when the whole content is written to the stream.
// <br><br>
// This procedure can be called multiple time on the same multipart object. The same
// content will be streamed each time.
//
// @param Multipart handler
// @param Stream
///
dcl-pr iv_multipart_toStream extproc(*dclcase);
    handler pointer value;
    stream pointer value;
end-pr;

/endif
